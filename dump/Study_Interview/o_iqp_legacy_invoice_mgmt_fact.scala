import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.Dataset
import org.apache.spark.sql.DataFrame
import org.apache.spark.SparkContext
import org.apache.spark.SparkContext._
import java.io.File
import org.apache.spark.storage.StorageLevel
import java.text.SimpleDateFormat

object o_iqp_legacy_invoice_mgmt_fact
{
  val tableName = "g00103.iqp_invoice_mgmt_fact"
  val sConnect = new Utils.sparkConnection
  val spark = sConnect.connect(tableName)
case class AuditTableSchema(batch_number: String, source_tbl_name: String, des_tbl_name: String, refresh_mode: String, refresh_rec_count: Long,
                             refresh_start_time: String, refresh_end_time: String, refresh_status: String, refresh_runtime: Long, message: String)
 val srctableName = "g00103.iqp_legacy_invoice_mgmt_fact"
def main(args: Array[String])={
  
val deBug = args.exists{ x => x.toLowerCase.contains("debug=true") }

      var isSuccess: Boolean = true
      var errorMessage: String = ""
      val batchNumber = spark.sparkContext.applicationId
      val beforeTimestamp: Long = System.currentTimeMillis()
      val formatter = java.text.NumberFormat.getIntegerInstance
      if (deBug) Utils.printLog(deBug,tableName + ": Debug is Enabled for batchNumber: " + batchNumber)
	  
try {
spark.conf.set("spark.kryo.classesToRegister", "AuditTableSchema")
spark.conf.set("spark.rdd.compress", "true")
spark.conf.set("spark.sql.autoBroadcastJoinThreshold",52428800)
spark.conf.set("spark.sql.tungsten.enabled", "true")
spark.sql("set spark.sql.shuffle.partitions=10")
spark.conf.set("spark.sql.crossJoin.enabled", "true")
spark.conf.set("spark.driver.maxResultSize", "8g")
spark.conf.set("spark.shuffle.consolidateFiles","true")
spark.conf.set("spark.driver.maxResultSize",2050)


//For Sap daily load
spark.sql("ALTER TABLE g00103.iqp_invoice_mgmt_fact DROP IF EXISTS PARTITION(data_source=30)")


//sparkContext broadcasting

val sc = spark.sparkContext

val broadcastProductPlatform1  = PlrFetch.broadCastPlat(spark) 
val broadcastCatalog  = PlrFetch.broadCastCat(spark) 
val getProductPlat2 =PlrFetch.getProductPlatL(broadcastProductPlatform1)

//PLR update broadcast from plrfetch file

spark.udf.register("legProductPlatform",getProductPlat2)

val getProductGroup2 =PlrFetch.getProductGpL(broadcastProductPlatform1)

spark.udf.register("legProductGroup",getProductGroup2)


val broadcastSubBusiness  =PlrFetch.broadCastSubBus(spark)
val getBusinessSegment1 =PlrFetch.getBusinessSegL(broadcastSubBusiness,broadcastCatalog)
spark.udf.register("legBusinessSegment", getBusinessSegment1)


val getOrderPulse1 =PlrFetch.getOrderPL(broadcastSubBusiness)
spark.udf.register("legOrderTypePulse", getOrderPulse1)

val getProductLn1 =PlrFetch.getProductLnL(broadcastCatalog)
spark.udf.register("legProductLine", getProductLn1)

val getSubProductLn1 =PlrFetch.getSubProductLnL(broadcastProductPlatform1)
spark.udf.register("legSubProductLine", getSubProductLn1)

val getProductSgmt1 =PlrFetch.getProductSgmtL(broadcastCatalog)
spark.udf.register("legProductSegment", getProductSgmt1)



//udf to get customer_number                                                                                                                                     	
spark.udf.register("customer", (SHIP_TO_COUNTRY:String,DATA_SOURCE:String,WAREHOUSE_NAME:String,BS:String,CUSTOMER_GROUP:String)=> {
val expr1=DATA_SOURCE match {
case "7" => "MDS_" + BS 
case "5" => "PQEMEA_" + BS 
case "3" => "BR_" + BS
case "11" => "T&D_" + BS 
case "12" => "T&D_" + BS 
case "2" => "T&D_" + BS 
case "6" => "T&D_" + BS 
case _ => BS
}
val V_CUSTOMER_NUMBER_DS=if(Option(BS).getOrElse("").isEmpty) expr1 else BS 
val expr2= if ( WAREHOUSE_NAME == "IO MULTILIN" ) "MKM_" + BS else "T&D_" + BS
val V_CUSTOMER_NUMBER_DS1= if ( DATA_SOURCE == "1" ) expr2 else V_CUSTOMER_NUMBER_DS
val expr4= if ( CUSTOMER_GROUP == "INTERNAL" || CUSTOMER_GROUP == "WITHIN DEPARTMENT" ) V_CUSTOMER_NUMBER_DS1 + "_INT" else V_CUSTOMER_NUMBER_DS1
val V_CUSTOMER_NUMBER_ZULU= if ( DATA_SOURCE == "12" ) expr4 else V_CUSTOMER_NUMBER_DS1
val V_CUSTOMER_NUMBER_DS_ZEAL= if ( DATA_SOURCE=="11" && SHIP_TO_COUNTRY == "INDIA" ) V_CUSTOMER_NUMBER_ZULU + "_ZEAL" else V_CUSTOMER_NUMBER_ZULU
val arr1= Array("11","2","6")
val expr8 = CUSTOMER_GROUP match {
case "EXTERNAL" => V_CUSTOMER_NUMBER_DS_ZEAL + "_EXT"
case "INTERNAL" => V_CUSTOMER_NUMBER_DS_ZEAL + "_INT"
case "WITHIN DEPARTMENT" => V_CUSTOMER_NUMBER_DS_ZEAL + "_INT"
case "WITHIN DIVISION" => V_CUSTOMER_NUMBER_DS_ZEAL + "_DIV"
case "WITHIN OTHER GE" => V_CUSTOMER_NUMBER_DS_ZEAL + "_OGE"
case "WITHIN OWN ECHELON" => V_CUSTOMER_NUMBER_DS_ZEAL + "_ECH"
case "WITHIN OWN SECTOR" => V_CUSTOMER_NUMBER_DS_ZEAL + "_SEC"
case _ => V_CUSTOMER_NUMBER_DS_ZEAL
}
val expr7= if ( arr1.contains(DATA_SOURCE) || ( DATA_SOURCE == "1" && WAREHOUSE_NAME != "IO MULTILIN")) expr8 else V_CUSTOMER_NUMBER_DS_ZEAL
val V_CUSTOMER_NUMBER_CG= if ( !Option(V_CUSTOMER_NUMBER_DS_ZEAL).getOrElse("").isEmpty) expr7 else V_CUSTOMER_NUMBER_DS_ZEAL
V_CUSTOMER_NUMBER_CG
})

//udf to get o_v_customer_number                                                                                                                                       
spark.udf.register("O_V_CUSTOMER_NUMBER", (V_CUSTOMER_NUMBER_CG:String) => {

val O_V_CUSTOMER_NUMBER= V_CUSTOMER_NUMBER_CG match {
case "T&D_63288" => "T&D_63288_INT"
case "T&D_4097" => "T&D_4097_INT"
case "T&D_19465" => "T&D_19465_INT"
case "T&D_57680" => "T&D_57680_INT"
case "T&D_3817T01_EXT" => "T&D_3817T01_INT"
case "T&D_7068B02_EXT" => "T&D_7068B02"
case "T&D_7068B02_INT" => "T&D_7068B02"
case _ => V_CUSTOMER_NUMBER_CG
}
O_V_CUSTOMER_NUMBER
})


spark.udf.register("V_O_CUSTOMER_GROUP", (V_CUSTOMER_NUMBER_CG:String,O_P_CUSTOMER_NUMBER_legacy:String,date_flag1:Boolean,lkp_value:String,data_flag2:Boolean,DATA_SOURCE:String,CUSTOMER_GROUP:String,O_P_CUSTOMER_NUMBER:String) => {
val arr2= Array("T&D_63288_INT","T&D_4097_INT","T&D_19465_INT","T&D_57680_INT","T&D_3817T01_INT","63288","4097","19465","57680")
val V_CUSTOMER_GROUP_SALES= if( (arr2.contains(V_CUSTOMER_NUMBER_CG) && date_flag1 ) || (( V_CUSTOMER_NUMBER_CG == "T&D_25680_INT" || V_CUSTOMER_NUMBER_CG == "25680") && data_flag2)) "Within Department" else lkp_value
val expr12= if ( Option(O_P_CUSTOMER_NUMBER).getOrElse("").isEmpty || O_P_CUSTOMER_NUMBER.length() <8 )  O_P_CUSTOMER_NUMBER_legacy else O_P_CUSTOMER_NUMBER
val V_CUSTOMER_GROUP= if( (arr2.contains(V_CUSTOMER_NUMBER_CG) && date_flag1 ) || (( V_CUSTOMER_NUMBER_CG == "T&D_25680_INT" || V_CUSTOMER_NUMBER_CG == "25680") && data_flag2)) "Within Department" else expr12
val arr3=Array("3","5","7","10","19")
val V_CUSTOMER_GROUP_SOURCE= if( arr3.contains(DATA_SOURCE)) V_CUSTOMER_GROUP_SALES else V_CUSTOMER_GROUP
val V_CUSTOMER_GROUP_INT= if( Option(V_CUSTOMER_GROUP_SOURCE).getOrElse("").isEmpty) CUSTOMER_GROUP else V_CUSTOMER_GROUP_SOURCE
val V_O_CUSTOMER_GROUP= Option(V_CUSTOMER_GROUP_INT).getOrElse("").toUpperCase() match{
case "INTERNAL" => "Within Department"
case "EXTERNAL CUSTOMER" => "External"
case _ => V_CUSTOMER_GROUP_INT
}
V_O_CUSTOMER_GROUP
})


spark.udf.register("ship_bill_l", (LKP_FIX:String,ORIG_FIX:String,LEN:Int) => { 
val expr2= if ( Option(LKP_FIX).getOrElse("").isEmpty )   ORIG_FIX else LKP_FIX
val expr1= if ( LEN == 2 ) expr2 else ORIG_FIX
expr1
})


spark.udf.register("V_SHIP_TO_COUNTRY_KOREA",(DATA_SOURCE:String,O_V_CUSTOMER_NUMBER:String,V_O_SHIP_TO_COUNTRY_L:String)=> { 
val expr2= if ( O_V_CUSTOMER_NUMBER == "2995072" || O_V_CUSTOMER_NUMBER == "MKM_60072" || (Option(V_O_SHIP_TO_COUNTRY_L).getOrElse("").toUpperCase() == "UNITED STATES" && O_V_CUSTOMER_NUMBER == "7739401" ))  "SOUTH KOREA" else V_O_SHIP_TO_COUNTRY_L
val V_SHIP_TO_COUNTRY_KOREA= if ( DATA_SOURCE == "19" ) expr2 else V_O_SHIP_TO_COUNTRY_L
V_SHIP_TO_COUNTRY_KOREA
})

spark.udf.register("V_SHIP_TO_COUNTRY_L1L2",(DATA_SOURCE:String,O_V_CUSTOMER_NUMBER:String,V_O_SHIP_TO_COUNTRY_L:String,O_V_CUSTOMER_NUMBER_lkp:String)=> { 
val expr2= if ( O_V_CUSTOMER_NUMBER == "2995072" || O_V_CUSTOMER_NUMBER == "MKM_60072" || (Option(V_O_SHIP_TO_COUNTRY_L).getOrElse("").toUpperCase() == "UNITED STATES" && O_V_CUSTOMER_NUMBER == "7739401" ))  "SOUTH KOREA" else V_O_SHIP_TO_COUNTRY_L
val V_SHIP_TO_COUNTRY_KOREA= if ( DATA_SOURCE == "19" ) expr2 else V_O_SHIP_TO_COUNTRY_L
val V_SHIP_TO_COUNTRY_L1L2 = if( Option(O_V_CUSTOMER_NUMBER_lkp).getOrElse("").isEmpty ) V_SHIP_TO_COUNTRY_KOREA else O_V_CUSTOMER_NUMBER_lkp
V_SHIP_TO_COUNTRY_L1L2
})

spark.udf.register("V_REGION_COUNTRY",(DATA_SOURCE:String,WAREHOUSE_NAME:String,V_O_SHIP_TO_COUNTRY_L:String,V_SHIP_TO_COUNTRY_L1L2:String)=> { 
val arr2=Array("IO MULTILIN CA", "IO MULTILIN PR","IO MULTILIN US")
val V_REGION_COUNTRY1=if(arr2.contains(Option(WAREHOUSE_NAME).getOrElse("").toUpperCase())) "NULL" else V_O_SHIP_TO_COUNTRY_L
val V_REGION_COUNTRY=if(DATA_SOURCE=="4") V_SHIP_TO_COUNTRY_L1L2 else V_REGION_COUNTRY1
V_REGION_COUNTRY
})

//udf region_state for ship_bill to state                                                                                                                                                                          
spark.udf.register("V_REGION_STATE",(WAREHOUSE_NAME:String,SHIP_TO_STATE:String,V_SHIP_TO_STATE_L:String)=> { 
val arr1=Array("IO MULTILIN CA","IO MULTILIN PR","IO MULTILIN US")
val V_REGION_STATE=if(arr1.contains(Option(WAREHOUSE_NAME).getOrElse("").toUpperCase())) Option(SHIP_TO_STATE).getOrElse("").toUpperCase() else V_SHIP_TO_STATE_L
V_REGION_STATE
})

//O_O_SUBREGION output of all the subregions                                                                                                                                                                                                                                                                    
spark.udf.register("O_O_SUBREGION",(V_REGION_COUNTRY:String,V_SUBREGION_US_CANADA:String,V_SUBREGION_REST:String,SUBREGION:String)=> { 
val arr1=Array("UNITED STATES", "US", "CANADA")
val expr1=if(arr1.contains(Option(V_REGION_COUNTRY).getOrElse("").toUpperCase())) V_SUBREGION_US_CANADA else V_SUBREGION_REST
val expr2=if(Option(expr1).getOrElse("").isEmpty) SUBREGION else expr1
expr2
})

//udf to get ship_to_state_legacy                                                                                                                                                                                                                                                                
spark.udf.register("V_SHIP_TO_STATE_L",(V_SHIP_TO_COUNTRY_L1L2:String,date_flag1:Boolean,SHIP_TO_COUNTRY:String,DATA_SOURCE:String,V_STATE_CODE_FIX_PC_PQ_COMM:String,V_SHIP_TO_STATE_FIX:String)=> { 
val arr1=Array("UNITED STATES","US", "Canada")
val expr6= if(date_flag1) Option(V_STATE_CODE_FIX_PC_PQ_COMM).getOrElse("").toUpperCase() else Option(V_SHIP_TO_STATE_FIX).getOrElse("").toUpperCase()
val expr5= if(arr1.contains(SHIP_TO_COUNTRY)) expr6 else Option(V_SHIP_TO_STATE_FIX).getOrElse("").toUpperCase()
val V_O_STATE_CODE_FIX_PC_PQ_COMM = if ( DATA_SOURCE == "19" ) expr5 else Option(V_SHIP_TO_STATE_FIX).getOrElse("").toUpperCase()
val expr7 = if( V_SHIP_TO_COUNTRY_L1L2 == "UNITED STATES" || V_SHIP_TO_COUNTRY_L1L2 == "US" && Option(V_O_STATE_CODE_FIX_PC_PQ_COMM).getOrElse("").isEmpty ) "NY" else V_O_STATE_CODE_FIX_PC_PQ_COMM
val V_SHIP_TO_STATE_L= if( V_SHIP_TO_COUNTRY_L1L2 == "CANADA" && Option(V_O_STATE_CODE_FIX_PC_PQ_COMM).getOrElse("").isEmpty ) "ON" else expr7
V_SHIP_TO_STATE_L
})
//udf to get v_sub_region_ship_to_state_l                                                                                                                             
spark.udf.register("V_SUB_REGION_SHIP_TO_STATE_L",(V_SHIP_TO_COUNTRY_L1L2:String,pole_lkp:String,V_SHIP_TO_STATE_L:String)=> { 
val expr8=if((V_SHIP_TO_COUNTRY_L1L2=="UNITED STATES"|| V_SHIP_TO_COUNTRY_L1L2=="US") && Option(pole_lkp).getOrElse("").isEmpty) "NY" else V_SHIP_TO_STATE_L
val V_SUB_REGION_SHIP_TO_STATE_L=if(V_SHIP_TO_COUNTRY_L1L2=="CANADA" && Option(pole_lkp).getOrElse("").isEmpty) "ON" else expr8
V_SUB_REGION_SHIP_TO_STATE_L
})
//udf to get plant_desc                                                                                                                                            
spark.udf.register("plant_desc", (DATA_SOURCE:String,V_TIER2:String,V_PLANT_SITE:String,V_SUBPNL:String,PRODUCT_PLATFORM:String,V_PLANT_DESCRIPTION_LKP:String,MANAGEMENT_ENTITY:String ) => {
val arr1=Array("Accessories/EM","Legacy","UR/UR+")
val expr4=if(V_PLANT_SITE=="C58" && !arr1.contains(PRODUCT_PLATFORM)) "Markham" else V_PLANT_DESCRIPTION_LKP
val expr3=if(V_PLANT_SITE=="C58" && arr1.contains(PRODUCT_PLATFORM)) "Anasco" else expr4
val expr2=if(V_PLANT_SITE=="C55" && V_SUBPNL=="LENTRONICS") "Markham-Lentronics" else expr3
val expr1=if(V_PLANT_SITE=="M7") "Spain" else expr2
val V_PLANT_DESCRIPTION_MKM=if(DATA_SOURCE=="1" && V_TIER2=="GRID AUTOMATION") expr1 else V_PLANT_DESCRIPTION_LKP 
val expr8=if(MANAGEMENT_ENTITY=="M1") "Markham-Lentronics" else V_PLANT_DESCRIPTION_MKM
val expr7=if(MANAGEMENT_ENTITY=="M5") "Anasco" else expr8
val arr2=Array("M6","CP7","AU")
val expr6=if(arr2.contains(MANAGEMENT_ENTITY)) "Markham" else expr7
val expr5=if(MANAGEMENT_ENTITY == "M7") "Spain" else expr6
val V_PLANT_DESCRIPTION_SPAIN=if(DATA_SOURCE=="10" && V_TIER2=="GRID AUTOMATION") expr5 else V_PLANT_DESCRIPTION_MKM
V_PLANT_DESCRIPTION_SPAIN
})

//inner query for port variable creation and joining

val temp_df=spark.sql("""select * from(select  RANK() over(partition by invoice_number,catlog_number,process_date,data_source order by record_created_date ASC) rank ,
ORDER_REQUISITION_NUMBER	,
LINE_NUMBER	,
INVOICE_NUMBER	,
INVOICE_LINE_NUMBER	,
CATLOG_NUMBER	,
CATLOG_DESCRIPTION	,
CUSTOMER_PO_NBR	,
SHIP_TO_CUSTOMER_NUMBER	,
SHIP_TO_CUSTOMER_NAME	,
CUSTOMER_GROUP	,
SHIP_TO_ADDRESS_1	,
SHIP_TO_ADDRESS_2	,
SHIP_TO_ADDRESS_3	,
SHIP_TO_ADDRESS_4	,
SHIP_TO_STATE	,
SHIP_TO_COUNTRY	,
SHIP_TO_ZIP_CODE	,
BILL_TO_CUSTOMER_NUMBER	,
BILL_TO_CUSTOMER_NAME	,
BILL_TO_ADDRESS_1	,
BILL_TO_ADDRESS_2	,
BILL_TO_ADDRESS_3	,
BILL_TO_ADDRESS_4	,
BILL_TO_STATE	,
BILL_TO_COUNTRY	,
BILL_TO_ZIP_CODE	,
SOLD_TO_CUSTOMER_NUMBER	,
SOLD_TO_CUSTOMER_NAME	,
SOLD_TO_ADDRESS_1	,
SOLD_TO_ADDRESS_2	,
SOLD_TO_ADDRESS_3	,
SOLD_TO_ADDRESS_4	,
SOLD_TO_STATE	,
SOLD_TO_COUNTRY	,
SOLD_TO_ZIP_CODE	,
END_USER_NAME	,
CUSTOMER_REQUEST_DATE	,
ORDER_RECEIPT_DATE	,
ORDERED_DATE	,
ORDER_ENTRY_DATE	,
SCHEDULED_SHIP_DATE	,
SHIPPED_DATE	,
INVOICE_DATE	,
GL_POSTING_DATE	,
PRODUCT_CLASS_CODE	,
SALES_CHANNEL	,
SHIP_FROM_WAREHOUSE_NAME	,
PRODUCING_PLANT	,
MANAGEMENT_ENTITY	,
INVOICE_LINE_QUANTITY	,
UNIT_SELLING_PRICE	,
INVOICE_LINE_AMOUNT	,
MATERIAL_COST	,
LABOR_COST	,
OVERHEAD_COST	,
COMMISSIONS	,
FREIGHT	,
UNIT_WEIGHT	,
TAX_AMOUNT	,
SHIP_METHOD	,
INVOICE_CURRENCY_CODE	,
USD_CONVERSION_RATE	,
SALES_ENGINEER_CODE	,
SALES_ENGINEER_NAME	,
PAYMENT_TERM	,
APPROACH_CODE	,
ORDER_TYPE	,
PRODUCT_TIER_1	,
PRODUCT_TIER_2	,
PRODUCT_TIER_3	,
PRODUCT_TIER_4	,
PRODUCT_TIER_5	,
PRODUCT_TIER_6	,
DATA_SOURCE	,
RECORD_CREATED_BY	,
record_created_date,
CURRENT_FLAG	,
ATTRIBUTE1	,
ATTRIBUTE2	,
ATTRIBUTE3	,
ATTRIBUTE4	,
ATTRIBUTE5	,
WORLD_POLE	,
GO_CLASS_CODE	,
OFFICE_TAKEN_CODE	,
CUSTOMER_GROUP_CODE	,
CUSTOMER_TYPE_DESCRIPTION	,
CESD_USER_NUMBER	,
SPA_NUMBER	,
MAJOR_LINE_CODE	,
RO_NUMBER	,
TRANSACTION_TYPE	,
SALES_ACCOUNT	,
INVOICE_TYPE	,
LEDGER_CODE	,
SALES_COST_CENTRE	,
LEAD_TIME	,
REASON_CODE	,
SHIP_TO_CITY	,
DIST_CH_ID	,
DELIVERY_NO	,
DELIVERY_LINE_ITEM	,
PRODUCT_TIER_6_DESC	,
PRODUCT_TIER_7	,
PRODUCT_TIER_7_DESC	,
PRODUCT_TIER_8	,
PRODUCT_TIER_8_DESC	,
PRODUCT_TIER_9	,
PRODUCT_TIER_9_DESC	,
PRODUCT_TIER_10	,
PROJECT_NUMBER	,
ORDER_NUMBER	,
CUSTOMER_PO_DATE	,
BILL_TO_CUSTOMER_CITY	,
TERMS_CODE_DESCRIPTION	,
TITLE_TRANSFER_TERMS	,
ACCOUNT_NUMBER_BUYER	,
CMF_COMPLIANCE_CODE	,
ORDER_STATUS_CODE	,
CHANNEL_ID	,
CURRENT_SHIP_DATE	,
INVOICE_PREFIX	,
MANUFACTURING_DESCRIPTION	,
CASH_DISCOUNT	,
ATM_CODE	,
ORACLE_ORDER_NUMBER	,
STOCK_DROP	,
CUSTOMER_CODE	,
PRODUCTCLASS	,
SITE	,
PRODUCTCLASS_ID	,
PRODUCTDESCRIPTION	,
MARKET	,
FAMILY	,
BUSINESSSEGMENT	,
PRODUCTCLASS_ID_BUSRPT	,
CATALOGNUMBER_BUSRPT	,
FAMILY_BUSRPT	,
SUBFAMILY_BUSRPT	,
PRODUCTDESCRIPTION_BUSRPT	,
PRODUCTLINE_BUSRPT	,
BUSINESSSEGMENT_BUSRPT	,
BUSINESSSUBSEGMENT_BUSRPT	,
PRODUCTLINE	,
COMPONENTFLAG	,
PRODUCT_PLATFORM	,
PRODUCT_SEGMENT	,
PRODUCTCLASSGROUP	,
END_DESTINATION_COUNTRY	,
END_DESTINATION_STATE	,
SOLDTO_CITY	,
SOLDTO_SITENUMBER	,
SALESMANAGERCODE	,
SHIPTO_SITENUMBER	,
BILLTO_SITENUMBER	,
IMPORTING_TEXTFILE	,
WORLD_SUB_POLE	,
ORDER_TYPE_PULSE	,
SALES_ENGINEER	,
REPLENISHMENT_SOURCE	,
SHIPSTATECODE	,
OVERHEAD	,
DISTRICT_CODE	,
FRST_CUST_SHIP_DATE	,
FRST_CUST_DELIVERY_DATE	,
CASH_DISCOUNTS	,
CURRENT_SCHEDULE_DATE	,
UNIT_LIST_PRICE	,
GROSS_SALES	,
CITY_NAME	,
STATE_NAME	,
USER_CUSTOMER_NUMBER	,
SEQUENCE_NUMBER	,
CHARGE_TO_CUSTOMER_NUMBER	,
FOREIGN_CURRENCY_NET_AMOUNT	,
BILL_UNIT_CODE	,
ID_IDENTITY	,
MATERIAL_OVERHEAD	,
OSP_COST	,
NON_GE_PART_COST	,
BAAN_ORDER_NUMBER	,
PRODUCT_PLATFORM_RMA	,
PRODUCT_GROUP_RMA	,
PRODUCT_LINE_RMA	,
PRODUCT_CLASS_RMA	,
PLANT_DESCRIPTION	,
PLANT_MANAGER_NAME	,
NET_QUANTITY	,
SHIPPINGWAREHOUSECODE	,
CUSTOMER_ORDER_DATE	,
REVISED_CHANNEL	,
SUBSECTION	,
BAAN_PO	,
EARLIEST_ACCEPTABLE_DATE,
PROCESS_DATE
from g00103.iqp_legacy_sales_common_stg ) 
where rank=1
""").cache.createOrReplaceTempView("old") 

val temp1_df=spark.sql("""select * from(select  RANK() over(partition by invoice_number,catlog_number,process_date,data_source order by record_created_date,INVOICE_LINE_NUMBER DESC) rank ,
ORDER_REQUISITION_NUMBER	,
LINE_NUMBER	,
INVOICE_NUMBER	,
INVOICE_LINE_NUMBER	,
CATLOG_NUMBER	,
CATLOG_DESCRIPTION	,
CUSTOMER_PO_NBR	,
SHIP_TO_CUSTOMER_NUMBER	,
SHIP_TO_CUSTOMER_NAME	,
CUSTOMER_GROUP	,
SHIP_TO_ADDRESS_1	,
SHIP_TO_ADDRESS_2	,
SHIP_TO_ADDRESS_3	,
SHIP_TO_ADDRESS_4	,
SHIP_TO_STATE	,
SHIP_TO_COUNTRY	,
SHIP_TO_ZIP_CODE	,
BILL_TO_CUSTOMER_NUMBER	,
BILL_TO_CUSTOMER_NAME	,
BILL_TO_ADDRESS_1	,
BILL_TO_ADDRESS_2	,
BILL_TO_ADDRESS_3	,
BILL_TO_ADDRESS_4	,
BILL_TO_STATE	,
BILL_TO_COUNTRY	,
BILL_TO_ZIP_CODE	,
SOLD_TO_CUSTOMER_NUMBER	,
SOLD_TO_CUSTOMER_NAME	,
SOLD_TO_ADDRESS_1	,
SOLD_TO_ADDRESS_2	,
SOLD_TO_ADDRESS_3	,
SOLD_TO_ADDRESS_4	,
SOLD_TO_STATE	,
SOLD_TO_COUNTRY	,
SOLD_TO_ZIP_CODE	,
END_USER_NAME	,
CUSTOMER_REQUEST_DATE	,
ORDER_RECEIPT_DATE	,
ORDERED_DATE	,
ORDER_ENTRY_DATE	,
SCHEDULED_SHIP_DATE	,
SHIPPED_DATE	,
INVOICE_DATE	,
GL_POSTING_DATE	,
PRODUCT_CLASS_CODE	,
SALES_CHANNEL	,
SHIP_FROM_WAREHOUSE_NAME	,
PRODUCING_PLANT	,
MANAGEMENT_ENTITY	,
INVOICE_LINE_QUANTITY	,
UNIT_SELLING_PRICE	,
INVOICE_LINE_AMOUNT	,
MATERIAL_COST	,
LABOR_COST	,
OVERHEAD_COST	,
COMMISSIONS	,
FREIGHT	,
UNIT_WEIGHT	,
TAX_AMOUNT	,
SHIP_METHOD	,
INVOICE_CURRENCY_CODE	,
USD_CONVERSION_RATE	,
SALES_ENGINEER_CODE	,
SALES_ENGINEER_NAME	,
PAYMENT_TERM	,
APPROACH_CODE	,
ORDER_TYPE	,
PRODUCT_TIER_1	,
PRODUCT_TIER_2	,
PRODUCT_TIER_3	,
PRODUCT_TIER_4	,
PRODUCT_TIER_5	,
PRODUCT_TIER_6	,
DATA_SOURCE	,
RECORD_CREATED_BY	,
record_created_date,
CURRENT_FLAG	,
ATTRIBUTE1	,
ATTRIBUTE2	,
ATTRIBUTE3	,
ATTRIBUTE4	,
ATTRIBUTE5	,
WORLD_POLE	,
GO_CLASS_CODE	,
OFFICE_TAKEN_CODE	,
CUSTOMER_GROUP_CODE	,
CUSTOMER_TYPE_DESCRIPTION	,
CESD_USER_NUMBER	,
SPA_NUMBER	,
MAJOR_LINE_CODE	,
RO_NUMBER	,
TRANSACTION_TYPE	,
SALES_ACCOUNT	,
INVOICE_TYPE	,
LEDGER_CODE	,
SALES_COST_CENTRE	,
LEAD_TIME	,
REASON_CODE	,
SHIP_TO_CITY	,
DIST_CH_ID	,
DELIVERY_NO	,
DELIVERY_LINE_ITEM	,
PRODUCT_TIER_6_DESC	,
PRODUCT_TIER_7	,
PRODUCT_TIER_7_DESC	,
PRODUCT_TIER_8	,
PRODUCT_TIER_8_DESC	,
PRODUCT_TIER_9	,
PRODUCT_TIER_9_DESC	,
PRODUCT_TIER_10	,
PROJECT_NUMBER	,
ORDER_NUMBER	,
CUSTOMER_PO_DATE	,
BILL_TO_CUSTOMER_CITY	,
TERMS_CODE_DESCRIPTION	,
TITLE_TRANSFER_TERMS	,
ACCOUNT_NUMBER_BUYER	,
CMF_COMPLIANCE_CODE	,
ORDER_STATUS_CODE	,
CHANNEL_ID	,
CURRENT_SHIP_DATE	,
INVOICE_PREFIX	,
MANUFACTURING_DESCRIPTION	,
CASH_DISCOUNT	,
ATM_CODE	,
ORACLE_ORDER_NUMBER	,
STOCK_DROP	,
CUSTOMER_CODE	,
PRODUCTCLASS	,
SITE	,
PRODUCTCLASS_ID	,
PRODUCTDESCRIPTION	,
MARKET	,
FAMILY	,
BUSINESSSEGMENT	,
PRODUCTCLASS_ID_BUSRPT	,
CATALOGNUMBER_BUSRPT	,
FAMILY_BUSRPT	,
SUBFAMILY_BUSRPT	,
PRODUCTDESCRIPTION_BUSRPT	,
PRODUCTLINE_BUSRPT	,
BUSINESSSEGMENT_BUSRPT	,
BUSINESSSUBSEGMENT_BUSRPT	,
PRODUCTLINE	,
COMPONENTFLAG	,
PRODUCT_PLATFORM	,
PRODUCT_SEGMENT	,
PRODUCTCLASSGROUP	,
END_DESTINATION_COUNTRY	,
END_DESTINATION_STATE	,
SOLDTO_CITY	,
SOLDTO_SITENUMBER	,
SALESMANAGERCODE	,
SHIPTO_SITENUMBER	,
BILLTO_SITENUMBER	,
IMPORTING_TEXTFILE	,
WORLD_SUB_POLE	,
ORDER_TYPE_PULSE	,
SALES_ENGINEER	,
REPLENISHMENT_SOURCE	,
SHIPSTATECODE	,
OVERHEAD	,
DISTRICT_CODE	,
FRST_CUST_SHIP_DATE	,
FRST_CUST_DELIVERY_DATE	,
CASH_DISCOUNTS	,
CURRENT_SCHEDULE_DATE	,
UNIT_LIST_PRICE	,
GROSS_SALES	,
CITY_NAME	,
STATE_NAME	,
USER_CUSTOMER_NUMBER	,
SEQUENCE_NUMBER	,
CHARGE_TO_CUSTOMER_NUMBER	,
FOREIGN_CURRENCY_NET_AMOUNT	,
BILL_UNIT_CODE	,
ID_IDENTITY	,
MATERIAL_OVERHEAD	,
OSP_COST	,
NON_GE_PART_COST	,
BAAN_ORDER_NUMBER	,
PRODUCT_PLATFORM_RMA	,
PRODUCT_GROUP_RMA	,
PRODUCT_LINE_RMA	,
PRODUCT_CLASS_RMA	,
PLANT_DESCRIPTION	,
PLANT_MANAGER_NAME	,
NET_QUANTITY	,
SHIPPINGWAREHOUSECODE	,
CUSTOMER_ORDER_DATE	,
REVISED_CHANNEL	,
SUBSECTION	,
BAAN_PO	,
EARLIEST_ACCEPTABLE_DATE,
PROCESS_DATE
from g00103.iqp_legacy_sales_common_stg ) 
where rank=1
""").cache.createOrReplaceTempView("recent") 

val main_df=spark.sql("""select
distinct b.*
from old a left join recent b on(
a.invoice_number=b.invoice_number and
a.data_source=b.data_source and
a.catlog_number=b.catlog_number and
a.process_date=b.process_date 
) 
where b.invoice_number is not null and b.data_source is not null and 
b.catlog_number is not null and b.process_date is not null""")

val main2_df=spark.sql("select * from old")

val temp3_df=main_df.union(main2_df).createOrReplaceTempView("tempo")

spark.sql("select distinct * from   tempo").createOrReplaceTempView("IQP_LEGACY_SALES_COMMON_STG") 



val inner_df=spark.sql("""SELECT IQP_LEGACY_SALES_COMMON_STG.ORDER_REQUISITION_NUMBER as REQUISITION_NUMBER,
to_date(IQP_LEGACY_SALES_COMMON_STG.PROCESS_DATE)>to_date('2014-04-02') as date_flag1,
to_date(IQP_LEGACY_SALES_COMMON_STG.PROCESS_DATE)>TO_DATE('2012-05-07') as data_flag2,
ibhd.plantcode_id as plantcode_id,

IQP_LEGACY_SALES_COMMON_STG.LINE_NUMBER as SALES_ORDER_LINE,
NULL as ACCOUNTING_RULE_DURATION,
NULL as LINE_TYPE,
NULL as INTERFACE_LINE_CONTEXT,
NULL as SALES_ORDER_SOURCE,
IQP_LEGACY_SALES_COMMON_STG.INVOICE_NUMBER as INVOICE_NUMBER,
nvl(IQP_LEGACY_SALES_COMMON_STG.INVOICE_LINE_NUMBER,-1) as LINE_NUMBER,
nvl(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NUMBER,upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER)) BS,
IF((SUBSTR(IQP_LEGACY_SALES_COMMON_STG.CATLOG_NUMBER,1,5) != 'URMOD'), 
IF((IQP_LEGACY_SALES_COMMON_STG.PRODUCT_PLATFORM='UR/UR+'),CONCAT(LKP_PROD_CLASS.PRODUCTCLASS_CODE,SUBSTR(IQP_LEGACY_SALES_COMMON_STG.CATLOG_NUMBER,3)),
IQP_LEGACY_SALES_COMMON_STG.CATLOG_NUMBER), 
IQP_LEGACY_SALES_COMMON_STG.CATLOG_NUMBER) as PRODUCT_NUMBER,

IQP_LEGACY_SALES_COMMON_STG.CATLOG_DESCRIPTION as ITEM_LONG_DESCRIPTION,
IQP_LEGACY_SALES_COMMON_STG.CUSTOMER_PO_NBR as PURCHASE_ORDER,
IQP_LEGACY_SALES_COMMON_STG.CUSTOMER_PO_NBR as CUSTOMER_PO_NBR,
IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER as SHIP_TO_CUSTOMER_NUMBER,

IF(id.DATA_SOURCE_key='10',IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NAME,IF(id.DATA_SOURCE_key = '12',
nvl(LKP_IQP_CUSTOMER.CUSTOMER_NAME,IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NAME) ,IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NAME)) as SHIP_TO_CUSTOMER_NAME,

IQP_LEGACY_SALES_COMMON_STG.CUSTOMER_GROUP as CUSTOMER_GROUP,
NULL as PURCHASE_ORDER_REVISION,
NULL as CUSTOMER_REFERENCE,
NULL as CUST_TRX_LINE_GL_DIST_COMMENTS,
NULL as INTERNAL_NOTES,
NULL as EXCHANGE_RATE_TYPE,
NULL as EXCHANGE_RATE,
IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_ADDRESS_1 as SHIP_TO_ADDRESS1,
IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_ADDRESS_2 as SHIP_TO_ADDRESS2,
IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_ADDRESS_3 as SHIP_TO_ADDRESS3,
IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_ADDRESS_4 as SHIP_TO_ADDRESS4,

IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_STATE as SHIP_TO_STATE,

NULL as QUANTITY_ORDERED,
NULL as QUANTITY_CREDITED,
NULL as CUST_TRX_ALL_REASON_CODE,
NULL as PRINTING_OPTION,
NULL as PRINTING_COUNT,
NULL as PRINTING_PENDING,
case
  when IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY='MACEDONIA' or lkp.NEW_COUNTRY_NAME is null then IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY
		 else lkp.NEW_COUNTRY_NAME 
end as SHIP_TO_COUNTRY,
cast(NULL as string) as SHIP_TO_COUNTY,
IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_ZIP_CODE as SHIP_TO_POSTAL_CODE,
IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NUMBER as BILL_TO_CUSTOMER_NUMBER,
cast(NULL as string) as SHIP_TO_PROVINCE,

IF(id.DATA_SOURCE_key='10',IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NAME,IF(isnull(LKP_IQP_CUSTOMER_BILL.CUSTOMER_NAME)
or trim(LKP_IQP_CUSTOMER_BILL.CUSTOMER_NAME) = '',
IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NAME,
LKP_IQP_CUSTOMER_BILL.CUSTOMER_NAME)) as BILL_TO_CUSTOMER_NAME,

IQP_LEGACY_SALES_COMMON_STG.BILL_TO_ADDRESS_1 as BILL_TO_ADDRESS1,
IQP_LEGACY_SALES_COMMON_STG.BILL_TO_ADDRESS_2 as BILL_TO_ADDRESS2,
IQP_LEGACY_SALES_COMMON_STG.BILL_TO_ADDRESS_3 as BILL_TO_ADDRESS3,
IQP_LEGACY_SALES_COMMON_STG.BILL_TO_ADDRESS_4 as BILL_TO_ADDRESS4,
IQP_LEGACY_SALES_COMMON_STG.BILL_TO_STATE as BILL_TO_STATE,
IQP_LEGACY_SALES_COMMON_STG.BILL_TO_COUNTRY as BILL_TO_COUNTRY,
IQP_LEGACY_SALES_COMMON_STG.BILL_TO_ZIP_CODE as BILL_TO_POSTAL_CODE,
cast(null as string) as BILL_TO_PROVINCE,
IQP_LEGACY_SALES_COMMON_STG.END_USER_NAME as END_USER_NAME,
IQP_LEGACY_SALES_COMMON_STG.CUSTOMER_REQUEST_DATE as CUSTOMER_REQUEST_DATE,
IQP_LEGACY_SALES_COMMON_STG.ORDER_RECEIPT_DATE as ORDER_RECEIPT_DATE,
IQP_LEGACY_SALES_COMMON_STG.ORDERED_DATE as SALES_ORDER_DATE,
NULL as RULE_START_DATE,
NULL as CUSTOMER_REFERENCE_DATE,
IQP_LEGACY_SALES_COMMON_STG.SHIPPED_DATE as SHIP_DATE_ACTUAL,
IQP_LEGACY_SALES_COMMON_STG.INVOICE_DATE as INVOICE_DATE,
IQP_LEGACY_SALES_COMMON_STG.GL_POSTING_DATE as GL_POSTED_DATE,
NULL as GL_DATE,
NULL as ORIGINAL_GL_DATE,
NULL as END_DATE_COMMITMENT,
NULL as START_DATE_COMMITMENT,
NULL as TERM_DUE_DATE,
NULL as PRINTING_ORIGINAL_DATE,
NULL as PURCHASE_ORDER_DATE,
NULL as COMPLETE_FLAG,
NULL as ACCOUNT_SET_FLAG,
NULL as REC_OFFSET_FLAG,
NULL as LATEST_REC_FLAG,
NULL as AUTORULE_COMPLETE_FLAG,
NULL as TAX_EXEMPT_FLAG,
NULL as AMOUNT_INCLUDES_TAX_FLAG,
NULL as DERIVE_DATE_FLAG,
NULL as DEFAULT_TAX_EXEMPT_FLAG,
NULL as AUTO_BATCH_NUMBERING_FLAG,
NULL as AUTO_TRX_NUMBERING_FLAG,
NULL as CREATE_CLEARING_FLAG,
NULL as ALLOW_SALES_CREDIT_FLAG,
NULL as COPY_DOC_NUMBER_FLAG,
NULL as COPY_INV_TIDFF_TO_CM_FLAG,
NULL as ALLOW_DUPLICATE_TRX_NUM_FLAG,
NULL as ACCOUNTING_AFFECT_FLAG,
NULL as SIGNED_FLAG,
NULL as CREDIT_CHECK_FLAG,
NULL as PREPAYMENT_FLAG,
NULL as PARTIAL_DISCOUNT_FLAG,
NULL as CALC_DISCOUNT_ON_LINES_FLAG,
NULL as DRAWEE_ISSUED_FLAG,
NULL as TAX_CALCULATION_FLAG,
NULL as ALLOW_FREIGHT_FLAG,
NULL as ALLOW_OVERAPPLICATION_FLAG,
NULL as NATURAL_APPLICATION_ONLY_FLAG,
NULL as CUST_TRX_LNES_ATTRBTE_CATGRY,
NULL as CUST_TRX_ALL_ATTRBTE_CATERY,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE1,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE2,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE3,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE4,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE5,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE6,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE7,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE8,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE9,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE10,
IQP_LEGACY_SALES_COMMON_STG.SALES_CHANNEL as SALES_CHANNEL,
cast(NULL as string) as BILL_TO_COUNTY,
IQP_LEGACY_SALES_COMMON_STG.SHIP_FROM_WAREHOUSE_NAME as ORGANIZATION_NAME,
IQP_LEGACY_SALES_COMMON_STG.PRODUCING_PLANT as PRODUCING_PLANT,
IQP_LEGACY_SALES_COMMON_STG.MANAGEMENT_ENTITY as MANAGEMENT_ENTITY,
	  IQP_LEGACY_SALES_COMMON_STG.MANAGEMENT_ENTITY as REPLINISMENT_SOURCE,
	  NULL as COMMISSIONS,
NULL as CUST_TRX_LINE_GL_DIST_ID,
NULL as CODE_COMBINATION_ID,
NULL as SET_OF_BOOKS_ID,
NULL as REQUEST_ID,
NULL as PROGRAM_APPLICATION_ID,
NULL as PROGRAM_ID,
NULL as POSTING_CONTROL_ID,
NULL as CUST_TRX_LINE_GL_DIST_ORG_ID,
NULL as CUSTOMER_TRX_LINE_ID,
NULL as INVENTORY_ITEM_ID,
NULL as PREVIOUS_CUSTOMER_TRX_ID,
NULL as PREVIOUS_CUSTOMER_TRX_LINE_ID,
NULL as ACCOUNTING_RULE_ID,
NULL as LINK_TO_CUST_TRX_LINE_ID,
NULL as VAT_TAX_ID,
NULL as BILL_TO_CONTACT_ID,
NULL as BATCH_ID,
NULL as TAX_EXEMPTION_ID,
NULL as MEMO_LINE_ID,
NULL as CUST_TRX_LINES_ALL_ORG_ID,
NULL as WAREHOUSE_ID,
NULL as INVOICE_HEADER_ID,
NULL as PRIMARY_SALESREP_ID,
NULL as SOLD_TO_CUSTOMER_ID,
NULL as BILL_TO_CUSTOMER_ID,
NULL as BILL_TO_SITE_USE_ID,
NULL as SHIP_TO_CUSTOMER_ID,
NULL as SHIP_TO_CONTACT_ID,
NULL as SHIP_TO_SITE_USE_ID,
NULL as REMIT_TO_ADDRESS_ID,
NULL as TERM_ID,
NULL as RELATED_CUSTOMER_TRX_ID,
NULL as INVOICING_RULE_ID,
NULL as CUSTOMER_BANK_ACCOUNT_ID,
NULL as PAYING_CUSTOMER_ID,
NULL as PAYING_SITE_USE_ID,
NULL as ROW_ID,
NULL as SOURCE_DATA_KEY1,
NULL as SOURCE_DATA_KEY2,
NULL as DOC_SEQUENCE_ID,
NULL as BATCH_SOURCE_ID,
NULL as BATCH_SOURCES_ALL_ORG_ID,
NULL as CUST_TRX_ALL_ORG_ID,
NULL as GROUPING_RULE_ID,
NULL as CUST_TRX_TYPE_ID,
NULL as CREDIT_MEMO_TYPE_ID,
NULL as CREDIT_MEMO_BATCH_SOURCE_ID,
NULL as SUBSEQUENT_TRX_TYPE_ID,
NULL as CUST_TRX_TYPES_ALL_ORG_ID,
NULL as CUST_TRX_TYPES_ALL_NAME,
NULL as FIRST_INSTALLMENT_CODE,
NULL as IN_USE,
NULL as DUE_CUTOFF_DAY,
IQP_LEGACY_SALES_COMMON_STG.INVOICE_LINE_QUANTITY as QUANTITY_INVOICED,
NULL as UNIT_STANDARD_PRICE,
IQP_LEGACY_SALES_COMMON_STG.UNIT_SELLING_PRICE as UNIT_SELLING_PRICE,
IQP_LEGACY_SALES_COMMON_STG.INVOICE_LINE_AMOUNT as AMOUNT,
IQP_LEGACY_SALES_COMMON_STG.INVOICE_LINE_AMOUNT as EXTENDED_AMOUNT,
IQP_LEGACY_SALES_COMMON_STG.INVOICE_LINE_AMOUNT as REVENUE_AMOUNT,
IQP_LEGACY_SALES_COMMON_STG.INVOICE_LINE_AMOUNT as TOTAL_INVOICE_LINE_AMOUNT,
NULL as ACCOUNT_CLASS,
NULL as CONCATENATED_SEGMENTS,
NULL as CUST_TRX_ALL_COMMENTS,
NULL as TAX_PRECEDENCE,
NULL as TAX_RATE,
NULL as AUTORULE_DURATION_PROCESSED,
NULL as UOM_CODE,
NULL as AUTOTAX,
NULL as LAST_PERIOD_TO_CREDIT,
NULL as TAX_EXEMPT_NUMBER,
NULL as TAX_EXEMPT_REASON_CODE,
NULL as TAX_VENDOR_RETURN_CODE,
NULL as GROSS_UNIT_SELLING_PRICE,
NULL as GROSS_EXTENDED_AMOUNT,
IQP_LEGACY_SALES_COMMON_STG.MATERIAL_COST as MATERIAL_COST,
IQP_LEGACY_SALES_COMMON_STG.LABOR_COST as LABOR_COST,
IQP_LEGACY_SALES_COMMON_STG.OVERHEAD_COST as OVERHEAD_COST,
IQP_LEGACY_SALES_COMMON_STG.COMMISSIONS as COMMISION,
IQP_LEGACY_SALES_COMMON_STG.FREIGHT as FREIGHT,
IQP_LEGACY_SALES_COMMON_STG.UNIT_WEIGHT as UNIT_WEIGHT,
IQP_LEGACY_SALES_COMMON_STG.TAX_AMOUNT as TAXABLE_AMOUNT,
NULL as INVOICED_LINE_ACCTG_LEVEL,
IQP_LEGACY_SALES_COMMON_STG.SHIP_METHOD as SHIP_METHOD,
IQP_LEGACY_SALES_COMMON_STG.INVOICE_CURRENCY_CODE as INVOICE_CURRENCY_CODE,
NULL as LAST_PRINTED_SEQUENCE_NUM,
NULL as CREDIT_METHOD_FOR_RULES,
NULL as CREDIT_METHOD_FOR_INSTALLMENTS,
NULL as SHIP_VIA,
NULL as WAYBILL_NUMBER,
NULL as FOB_POINT,
NULL as INTERFACE_HEADER_CONTEXT,
NULL as RECURRED_FROM_TRX_NUMBER,
NULL as STATUS_TRX,
NULL as DOC_SEQUENCE_VALUE,
NULL as APPROVAL_CODE,
NULL as OLD_TRX_NUMBER,
NULL as CT_REFERENCE,
NULL as BATCH_SOURCES_ALL_NAME,
NULL as CUST_TRX_TYPES_ALL_STATUS,
NULL as LAST_BATCH_NUM,
NULL as DEFAULT_INV_TRX_TYPE,
NULL as ACCOUNTING_FLEXFIELD_RULE,
NULL as ACCOUNTING_RULE_RULE,
NULL as AGREEMENT_RULE,
NULL as BATCH_SOURCE_TYPE,
NULL as BILL_ADDRESS_RULE,
NULL as BILL_CONTACT_RULE,
NULL as BILL_CUSTOMER_RULE,
NULL as CUST_TRX_TYPE_RULE,
NULL as FOB_POINT_RULE,
NULL as GL_DATE_PERIOD_RULE,
NULL as INVALID_LINES_RULE,
NULL as INVALID_TAX_RATE_RULE,
NULL as INVENTORY_ITEM_RULE,
NULL as INVOICING_RULE_RULE,
NULL as MEMO_REASON_RULE,
NULL as REV_ACC_ALLOCATION_RULE,
NULL as SALESPERSON_RULE,
NULL as SALES_CREDIT_RULE,
NULL as SALES_CREDIT_TYPE_RULE,
NULL as SALES_TERRITORY_RULE,
NULL as SHIP_ADDRESS_RULE,
NULL as SHIP_CONTACT_RULE,
NULL as SHIP_CUSTOMER_RULE,
NULL as SHIP_VIA_RULE,
NULL as SOLD_CUSTOMER_RULE,
NULL as TERM_RULE,
NULL as UNIT_OF_MEASURE_RULE,
NULL as CUSTOMER_BANK_ACCOUNT_RULE,
NULL as MEMO_LINE_RULE,
NULL as RECEIPT_METHOD_RULE,
NULL as RELATED_DOCUMENT_RULE,
NULL as DEFAULT_REFERENCE,
NULL as POST_TO_GL,
NULL as BATCH_SOURCES_ALL_STATUS,
NULL as TYPE,
NULL as DEFAULT_TERM,
NULL as DEFAULT_PRINTING_OPTION,
NULL as DEFAULT_STATUS,
NULL as GL_ID_REV,
NULL as GL_ID_FREIGHT,
NULL as GL_ID_REC,
NULL as GL_ID_CLEARING,
NULL as GL_ID_TAX,
NULL as GL_ID_UNBILLED,
NULL as GL_ID_UNEARNED,
NULL as CREATION_SIGN,
NULL as BATCH_SOURCES_ALL_DESCRIPTION,
NULL as TRANSLATED_DESCRIPTION,
NULL as CUST_TRX_LINES_ALL_DESCRIPTION,
NULL as RA_TERMS_DESCRIPTION,
NULL as CUST_TRX_TYPES_ALL_DESCRIPTION,
NULL as CUST_TRX_TYPES_ALL_START_DATE,
NULL as CUST_TRX_TYPES_ALL_END_DATE,
IQP_LEGACY_SALES_COMMON_STG.USD_CONVERSION_RATE as CONVERSION_RATE,
IQP_LEGACY_SALES_COMMON_STG.SALES_ENGINEER_CODE as SALES_ENGINEER_CODE,
IQP_LEGACY_SALES_COMMON_STG.SALES_ENGINEER_NAME as SALES_ENGINEER_NAME,
IQP_LEGACY_SALES_COMMON_STG.PAYMENT_TERM as RA_TERMS_NAME,
NULL as BASE_AMOUNT,
NULL as ACCTD_AMOUNT,
NULL as PERCENTS,
IQP_LEGACY_SALES_COMMON_STG.APPROACH_CODE as APPROACH_CODE,
IQP_LEGACY_SALES_COMMON_STG.ORDER_TYPE as ORDER_TYPE,
id.DATA_SOURCE_key as DATA_SOURCE,
IQP_LEGACY_SALES_COMMON_STG.PROCESS_DATE as EXCHANGE_DATE,
IQP_LEGACY_SALES_COMMON_STG.PROCESS_DATE as PROCESS_DATE,
NULL as PRINTING_LAST_PRINTED,
NULL as CUST_TRX_ALL_WH_UPDATE_DATE,
NULL as BATCH_SOURCES_ALL_END_DATE,
NULL as BATCH_SOURCES_ALL_START_DATE,
NULL as RULE_END_DATE,
NULL as CUST_TRX_LINES_WH_UPDATE_DATE,
IQP_LEGACY_SALES_COMMON_STG.WORLD_POLE as WORLD_POLE,
IQP_LEGACY_SALES_COMMON_STG.GO_CLASS_CODE as GO_CLASS_CODE,
IQP_LEGACY_SALES_COMMON_STG.OFFICE_TAKEN_CODE as OFFICE_TAKEN_CODE,
IQP_LEGACY_SALES_COMMON_STG.CUSTOMER_GROUP_CODE  as CUSTOMER_GROUP_CODE,
IQP_LEGACY_SALES_COMMON_STG.CUSTOMER_TYPE_DESCRIPTION as CUSTOMER_TYPE_DESCRIPTION,
IQP_LEGACY_SALES_COMMON_STG.CESD_USER_NUMBER as CESD_USER_NUMBER,
IQP_LEGACY_SALES_COMMON_STG.SPA_NUMBER as SPA_NUMBER,
IQP_LEGACY_SALES_COMMON_STG.MAJOR_LINE_CODE as MAJOR_LINE_CODE,
IQP_LEGACY_SALES_COMMON_STG.RO_NUMBER as RO_NUMBER,
IQP_LEGACY_SALES_COMMON_STG.TRANSACTION_TYPE as TRANSACTION_TYPE,
IQP_LEGACY_SALES_COMMON_STG.INVOICE_TYPE as INVOICE_TYPE,
IQP_LEGACY_SALES_COMMON_STG.SALES_ACCOUNT as SALES_ACCOUNT,
IQP_LEGACY_SALES_COMMON_STG.SALES_COST_CENTRE as SALES_COST_CENTRE,
IQP_LEGACY_SALES_COMMON_STG.LEDGER_CODE as LEDGER_CODE,
IQP_LEGACY_SALES_COMMON_STG.LEAD_TIME as PRINTING_LEAD_DAYS,
IQP_LEGACY_SALES_COMMON_STG.REASON_CODE as CUST_TRX_LINES_ALL_REASON_CODE,
NULL as START_DATE_ACTIVE,
NULL as END_DATE_ACTIVE,
NULL as RA_TERMS_ATTRIBUTE_CATEGORY,
IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CITY as SHIP_TO_CITY,
IQP_LEGACY_SALES_COMMON_STG.DIST_CH_ID as DIST_CH_ID,
IQP_LEGACY_SALES_COMMON_STG.DELIVERY_NO as DELIVERY_NO,
IQP_LEGACY_SALES_COMMON_STG.DELIVERY_LINE_ITEM as DELIVERY_LINE_ITEM,
IQP_LEGACY_SALES_COMMON_STG.PROJECT_NUMBER as PROJECT_NUMBER,
IQP_LEGACY_SALES_COMMON_STG.ORDER_NUMBER as SALES_ORDER,
IQP_LEGACY_SALES_COMMON_STG.ORDER_NUMBER as ORDER_NUMBER,
IQP_LEGACY_SALES_COMMON_STG.CUSTOMER_PO_DATE as CUSTOMER_PO_DATE,
IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_CITY as BILL_TO_CITY,
NULL as INTERFACE_LINE_ATTRIBUTE2,
NULL as INTERFACE_LINE_ATTRIBUTE3,
NULL as INTERFACE_LINE_ATTRIBUTE4,
NULL as INTERFACE_LINE_ATTRIBUTE5,
NULL as INTERFACE_LINE_ATTRIBUTE6,
NULL as INTERFACE_LINE_ATTRIBUTE7,
NULL as INTERFACE_LINE_ATTRIBUTE8,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE11,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE12,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE13,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE14,
NULL as CUST_TRX_LINES_ALL_ATTRIBUTE15,
NULL as INTERFACE_LINE_ATTRIBUTE10,
NULL as INTERFACE_LINE_ATTRIBUTE11,
NULL as INTERFACE_LINE_ATTRIBUTE12,
NULL as INTERFACE_LINE_ATTRIBUTE13,
NULL as INTERFACE_LINE_ATTRIBUTE14,
NULL as INTERFACE_LINE_ATTRIBUTE15,
NULL as INTERFACE_LINE_ATTRIBUTE9,
NULL as CUST_TRX_ALL_ATTRIBUTE1,
NULL as CUST_TRX_ALL_ATTRIBUTE2,
NULL as CUST_TRX_ALL_ATTRIBUTE3,
NULL as CUST_TRX_ALL_ATTRIBUTE4,
NULL as CUST_TRX_ALL_ATTRIBUTE5,
NULL as CUST_TRX_ALL_ATTRIBUTE6,
NULL as CUST_TRX_ALL_ATTRIBUTE7,
NULL as CUST_TRX_ALL_ATTRIBUTE8,
NULL as CUST_TRX_ALL_ATTRIBUTE9,
NULL as CUST_TRX_ALL_ATTRIBUTE10,
NULL as CUST_TRX_ALL_ATTRIBUTE11,
NULL as CUST_TRX_ALL_ATTRIBUTE12,
NULL as CUST_TRX_ALL_ATTRIBUTE13,
NULL as CUST_TRX_ALL_ATTRIBUTE14,
NULL as CUST_TRX_ALL_ATTRIBUTE15,
NULL as INTERFACE_HEADER_ATTRIBUTE1,
NULL as INTERFACE_HEADER_ATTRIBUTE2,
NULL as INTERFACE_HEADER_ATTRIBUTE3,
NULL as INTERFACE_HEADER_ATTRIBUTE4,
NULL as INTERFACE_HEADER_ATTRIBUTE5,
NULL as INTERFACE_HEADER_ATTRIBUTE6,
NULL as INTERFACE_HEADER_ATTRIBUTE7,
NULL as INTERFACE_HEADER_ATTRIBUTE8,
NULL as INTERFACE_HEADER_ATTRIBUTE10,
NULL as INTERFACE_HEADER_ATTRIBUTE11,
NULL as INTERFACE_HEADER_ATTRIBUTE12,
NULL as INTERFACE_HEADER_ATTRIBUTE13,
NULL as INTERFACE_HEADER_ATTRIBUTE14,
NULL as INTERFACE_HEADER_ATTRIBUTE15,
NULL as INTERFACE_HEADER_ATTRIBUTE9,
NULL as CUST_TRX_TYPES_ALL_ATTRIBUTE3,
NULL as CUST_TRX_TYPES_ALL_ATTRIBUTE4,
NULL as CUST_TRX_TYPES_ALL_ATTRIBUTE7,
NULL as CUST_TRX_TYPES_ALL_ATTRIBUTE8,
NULL as CUST_TRX_TYPES_ALL_ATTRIBUTE9,
NULL as CUST_TRX_TYPES_ALL_ATTRIBUTE10,
NULL as RA_TERMS_ATTRIBUTE1,
NULL as RA_TERMS_ATTRIBUTE2,
NULL as RA_TERMS_ATTRIBUTE3,
NULL as RA_TERMS_ATTRIBUTE4,
NULL as RA_TERMS_ATTRIBUTE5,
NULL as RA_TERMS_ATTRIBUTE6,
NULL as RA_TERMS_ATTRIBUTE7,
NULL as RA_TERMS_ATTRIBUTE8,
NULL as RA_TERMS_ATTRIBUTE9,
NULL as RA_TERMS_ATTRIBUTE10,
NULL as RA_TERMS_ATTRIBUTE11,
NULL as RA_TERMS_ATTRIBUTE12,
NULL as RA_TERMS_ATTRIBUTE13,
NULL as RA_TERMS_ATTRIBUTE14,
NULL as RA_TERMS_ATTRIBUTE15,
'spark_o_legacy_invoice_mgmt_fact' as RECORD_INSERTED_BY,
'spark_o_legacy_invoice_mgmt_fact' as RECORD_UPDATED_BY,
current_timestamp as RECORD_INSERTED_DATE,
current_timestamp as RECORD_UPDATED_DATE,
NULL as GL_DIST_ALL_LAST_UPDATE_DATE,
NULL as GL_DIST_ALL_LAST_UPDATED_BY,
NULL as GL_DIST_ALL_CREATION_DATE,
NULL as GL_DIST_ALL_CREATED_BY,
NULL as TRX_LINES_ALL_LAST_UPDATE_DATE,
NULL as TRX_LINES_ALL_LAST_UPDATED_BY,
NULL as TRX_LINES_ALL_CREATION_DATE,
NULL as TRX_LINES_ALL_CREATED_BY,
NULL as TRX_ALL_LAST_UPDATE_DATE,
NULL as TRX_ALL_LAST_UPDATED_BY,
NULL as TRX_ALL_CREATION_DATE,
NULL as TRX_ALL_CREATED_BY,
NULL as WAREHOUSE_NAME,
NULL as CONVERSION_DATE,
IQP_LEGACY_SALES_COMMON_STG.TERMS_CODE_DESCRIPTION as TERMS_CODE_DESCRIPTION,
IQP_LEGACY_SALES_COMMON_STG.TITLE_TRANSFER_TERMS as TITLE_TRANSFER_TERMS,
IQP_LEGACY_SALES_COMMON_STG.ACCOUNT_NUMBER_BUYER as ACCOUNT_NUMBER_BUYER,
IQP_LEGACY_SALES_COMMON_STG.CMF_COMPLIANCE_CODE as CMF_COMPLIANCE_CODE,
IQP_LEGACY_SALES_COMMON_STG.ORDER_STATUS_CODE as ORDER_STATUS_CODE,
 IQP_LEGACY_SALES_COMMON_STG.CHANNEL_ID as CHANNEL_ID,
IQP_LEGACY_SALES_COMMON_STG.CURRENT_SHIP_DATE as CURRENT_SHIP_DATE,
IQP_LEGACY_SALES_COMMON_STG.INVOICE_PREFIX as INVOICE_PREFIX,
IQP_LEGACY_SALES_COMMON_STG.MANUFACTURING_DESCRIPTION as MANUFACTURING_DESCRIPTION,
IQP_LEGACY_SALES_COMMON_STG.CASH_DISCOUNT as CASH_DISCOUNT,
IQP_LEGACY_SALES_COMMON_STG.ATM_CODE as ATM_CODE,
IQP_LEGACY_SALES_COMMON_STG.ORACLE_ORDER_NUMBER as ORACLE_ORDER_NUMBER ,
IQP_LEGACY_SALES_COMMON_STG.STOCK_DROP as STOCK_DROP,
IQP_LEGACY_SALES_COMMON_STG.END_DESTINATION_COUNTRY as END_DESTINATION_COUNTRY,
IQP_LEGACY_SALES_COMMON_STG.END_DESTINATION_STATE as END_DESTINATION_STATE,
nvl(cc.CORRECT_CLASS,IQP_LEGACY_SALES_COMMON_STG.PRODUCT_CLASS_CODE) as PRODUCTCLASS, 
IQP_LEGACY_SALES_COMMON_STG.Soldto_City as Soldto_City,
IQP_LEGACY_SALES_COMMON_STG.Soldto_Sitenumber as Soldto_Sitenumber,
IQP_LEGACY_SALES_COMMON_STG.SalesManagercode as SalesManagercode,
IQP_LEGACY_SALES_COMMON_STG.Shipto_Sitenumber as Shipto_Sitenumber,
IQP_LEGACY_SALES_COMMON_STG.Billto_sitenumber as Billto_sitenumber,
IQP_LEGACY_SALES_COMMON_STG.IMPORTING_TEXTFILE as IMPORTING_TEXTFILE,
IQP_LEGACY_SALES_COMMON_STG.SALES_ENGINEER as SALES_ENGINEER,
IQP_LEGACY_SALES_COMMON_STG.REPLENISHMENT_SOURCE as REPLENISHMENT_SOURCE,
IQP_LEGACY_SALES_COMMON_STG.SHIPSTATECODE as SHIPSTATECODE,
IQP_LEGACY_SALES_COMMON_STG.overhead as overhead,
IQP_LEGACY_SALES_COMMON_STG.DISTRICT_CODE as DISTRICT_CODE,
IQP_LEGACY_SALES_COMMON_STG.FRST_CUST_SHIP_DATE as FRST_CUST_SHIP_DATE,
IQP_LEGACY_SALES_COMMON_STG.FRST_CUST_DELIVERY_DATE as FRST_CUST_DELIVERY_DATE,
IQP_LEGACY_SALES_COMMON_STG.CASH_DISCOUNTS as CASH_DISCOUNTS,
IQP_LEGACY_SALES_COMMON_STG.CURRENT_SCHEDULE_DATE as CURRENT_SCHEDULE_DATE,
IQP_LEGACY_SALES_COMMON_STG.UNIT_LIST_PRICE as UNIT_LIST_PRICE,
IQP_LEGACY_SALES_COMMON_STG.GROSS_SALES as GROSS_SALES,
IQP_LEGACY_SALES_COMMON_STG.CITY_NAME as CITY_NAME,
IQP_LEGACY_SALES_COMMON_STG.STATE_NAME as STATE_NAME,
IQP_LEGACY_SALES_COMMON_STG.USER_CUSTOMER_NUMBER as USER_CUSTOMER_NUMBER,
IQP_LEGACY_SALES_COMMON_STG.SEQUENCE_NUMBER as SEQUENCE_NUMBER,
IQP_LEGACY_SALES_COMMON_STG.CHARGE_TO_CUSTOMER_NUMBER as CHARGE_TO_CUSTOMER_NUMBER,
IQP_LEGACY_SALES_COMMON_STG.FOREIGN_CURRENCY_NET_AMOUNT as FOREIGN_CURRENCY_NET_AMOUNT,
IQP_LEGACY_SALES_COMMON_STG.BILL_UNIT_CODE as BILL_UNIT_CODE,
IQP_LEGACY_SALES_COMMON_STG.ID_IDENTITY as ID_IDENTITY,
IQP_LEGACY_SALES_COMMON_STG.MATERIAL_OVERHEAD as MATERIAL_OVERHEAD,
IQP_LEGACY_SALES_COMMON_STG.OSP_COST as OSP_COST,
IQP_LEGACY_SALES_COMMON_STG.NON_GE_PART_COST as NON_GE_PART_COST,
IQP_LEGACY_SALES_COMMON_STG.BAAN_ORDER_NUMBER as BAAN_ORDER_NUMBER,
IQP_LEGACY_SALES_COMMON_STG.PRODUCT_PLATFORM_RMA as PRODUCT_PLATFORM_RMA,
IQP_LEGACY_SALES_COMMON_STG.PRODUCT_GROUP_RMA as PRODUCT_GROUP_RMA,
IQP_LEGACY_SALES_COMMON_STG.PRODUCT_LINE_RMA as PRODUCT_LINE_RMA,
IQP_LEGACY_SALES_COMMON_STG.PRODUCT_CLASS_RMA as PRODUCT_CLASS_RMA,
IQP_LEGACY_SALES_COMMON_STG.NET_QUANTITY as NET_QUANTITY,
IQP_LEGACY_SALES_COMMON_STG.SHIPPINGWAREHOUSECODE as SHIPPINGWAREHOUSECODE,
IQP_LEGACY_SALES_COMMON_STG.CUSTOMER_ORDER_DATE as CUSTOMER_ORDER_DATE,
NULL as ITEM_TYPE_CODE,
IQP_LEGACY_SALES_COMMON_STG.REVISED_CHANNEL as REVISED_CHANNEL,
IQP_LEGACY_SALES_COMMON_STG.PRODUCTLINE as PRODUCTLINE,
IQP_LEGACY_SALES_COMMON_STG.PRODUCT_PLATFORM as PRODUCT_PLATFORM,
NULL as COMPONENTFLAG,
IQP_LEGACY_SALES_COMMON_STG.PRODUCT_SEGMENT as PRODUCT_SEGMENT,
IQP_LEGACY_SALES_COMMON_STG.SITE as SITE,
NULL as PRODUCTCLASSGROUP,
case 
  when IQP_LEGACY_SALES_COMMON_STG.RECORD_CREATED_BY in ('m_IQP_SAP_SALES_STG_TO_COMMON_STG',
'm_IQP_ZEAL_SALES_STG_TO_COMMON_STG',
'm_IQP_SPAIN_SALES_STG_TO_COMMON_STG',
'm_IQP_BRAZIL_SALES_STG_TO_COMMON_STG',
'm_IQP_BAAN_SALES_STG_TO_COMMON_STG',
'm_IQP_ZULU_SALES_STG_TO_COMMON_STG'
)
   then 'Pulse Reporting'  
  when IQP_LEGACY_SALES_COMMON_STG.RECORD_CREATED_BY in ('m_IQP_1STOP_MARS_SALES_STG_TO_COMMON_STG',
'm_IQP_PC_PS_COMM_STG_TO_COMMON_STG',
'm_IQP_PC_PS_COMM_SALES_OCHG_TO_COMMON_STG',
'm_IQP_LEGACY_PULSE_SALES_HISTORY_DB') then 'Rejected'
  else 'Pulse Reporting'
end as REPORT_PROCESS1, 
NULL as REPORT_PROCESS2,
NULL as REPORT_PROCESS3,
NULL as REPORT_PROCESS4,
NULL as REPORT_PROCESS5,
NULL as TAG_HISTORY_REPORT_PROCESS,
NULL as SOLD_TO_CUSTOMER_NUMBER,
NULL as SOLD_TO_CUSTOMER_NAME,
NULL as SOLD_TO_ADDRESS_1,
NULL as SOLD_TO_ADDRESS_2,
NULL as SOLD_TO_ADDRESS_3,
NULL as SOLD_TO_ADDRESS_4,
NULL as SOLD_TO_CITY,
NULL as SOLD_TO_STATE,
NULL as SOLD_TO_COUNTRY,
NULL as SOLD_TO_ZIP_CODE,
NULL as SPAN,
NULL as PLANT_DESCRIPTION,
NULL as PLANT_MANAGER_NAME,
NULL as ORDER_LINE_DIM_KEY,
NULL as PRODUCTCLASS_ID,
NULL as PRODUCTDESCRIPTION,
NULL as FAMILY,
NULL as BUSINESSSEGMENT,
NULL as PRODUCTCLASS_ID_BUSRPT,
NULL as CATALOGNUMBER_BUSRPT,
NULL as FAMILY_BUSRPT,
NULL as SUBFAMILY_BUSRPT,
NULL as PRODUCTDESCRIPTION_BUSRPT,
NULL as PRODUCTLINE_BUSRPT,
NULL as BUSINESSSEGMENT_BUSRPT,
NULL as BUSINESSSUBSEGMENT_BUSRPT,
cd.CUSTOMER_GROUP as SHIP_TO_CUST_GROUP,
cd.CUSTOMER_CLASSIFICATION as SHIP_TO_CLASSIFY,
cb.CUSTOMER_GROUP as BILL_TO_CUST_GROUP,
cb.CUSTOMER_CLASSIFICATION as BILL_TO_CLASSIFY, 
cd.SHIP_TO_REGION as SHIP_TO_REGION,
cb.SHIP_TO_REGION as BILL_TO_REGION,
cd.SHIP_TO_SUB_REGION as SHIP_TO_SUB_REGION,
cb.SHIP_TO_SUB_REGION as BILL_TO_SUB_REGION,
NULL as SUBSECTION,
NULL as CW_BUSINESS,
NULL as CW_COST_OF_GOODS_SOLD_ACC,
NULL as CW_END_CUSTOMER_NAME,
NULL as CW_ESTIMATED_ITEM_COST,
NULL as CW_EST_MATERIAL_COST,
NULL as CW_EST_LABOUR_COST,
NULL as CW_EST_OVERHEAD_COST,
NULL as CW_EST_OUTSDPROCESS_COST,
NULL as CW_EST_MATERIAL_OVH_COST,
NULL as CW_FAMILY_ID,
NULL as CW_GO_SCHEDULE,
NULL as CW_INCO_TERMS,
NULL as CW_INVOICE_TYPE,
NULL as CW_MAKE_BUY,
NULL as CW_MAT_PERCENTAGE_OF_SALES,
NULL as CW_ORDER_ORIGIN,
NULL as CW_SALES_LEDGER_ACCOUNT,
NULL as PRODUCT_SUB_LINE,
NULL as BUSINESS_SEGMENT,

customer(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY,id.DATA_SOURCE_key,cast(NULL as string),nvl(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NUMBER,upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER)),cd.CUSTOMER_GROUP) as V_CUSTOMER_NUMBER_CG,
O_V_CUSTOMER_NUMBER(customer(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY,id.DATA_SOURCE_key,cast(NULL as string),nvl(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NUMBER,upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER)),cd.CUSTOMER_GROUP)) as O_V_CUSTOMER_NUMBER,
LKP_CUSTOMER_GROUP.CUSTOMER_GROUP_CODE as O_P_CUSTOMER_NUMBER,
LKP_LEGACY_CUSTOMER_GROUP.CUSTOMER_GROUP_CODE as O_P_CUSTOMER_NUMBER_legacy,
nvl(LKP_CUSTOMER_GROUP_SALES.CUSTOMER_CLASSIFICATION,LKP_LEGACY_CUST_GROUP_SALES.CUSTOMER_CLASSIFICATION) as lkp_value,
LKP_COUNTRYOVERRIDE.COUNTRYNAME as O_V_CUSTOMER_NUMBER_lkp,
LKP_COUNTRYOVERRIDE_CG.COUNTRYNAME as V_CUSTOMER_NUMBER_CG_lkp,

IF((IQP_LEGACY_SALES_COMMON_STG.MANAGEMENT_ENTITY='PCC1' OR  IQP_LEGACY_SALES_COMMON_STG.MANAGEMENT_ENTITY='PCIA')  AND id.DATA_SOURCE_key='12','PCASIA',IF((ISNULL(IQP_LEGACY_SALES_COMMON_STG.MANAGEMENT_ENTITY)  AND  id.DATA_SOURCE_key='3'),'PCBR' ,IQP_LEGACY_SALES_COMMON_STG.MANAGEMENT_ENTITY)) as V_MANAGEMENT_ENTITY,

IF(id.DATA_SOURCE_key = '7', 
IF(upper(nvl(LKP_IQP_COUNTRY_CLEANER.CORRECTCOUNTRYNAME,upper(case
  when upper(trim(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY))='MACEDONIA' or lkp.NEW_COUNTRY_NAME is null then upper(trim(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY))
		 else upper(trim(lkp.NEW_COUNTRY_NAME)) 
end)))='UNITED KINGDOM'  and IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER in('40799', 'MDS_40799'), 'ALGERIA',upper(nvl(LKP_IQP_COUNTRY_CLEANER.CORRECTCOUNTRYNAME,upper(case
  when upper(trim(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY))='MACEDONIA' or lkp.NEW_COUNTRY_NAME is null then upper(trim(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY))
		 else upper(trim(lkp.NEW_COUNTRY_NAME))
end)))),
upper(nvl(LKP_IQP_COUNTRY_CLEANER.CORRECTCOUNTRYNAME,upper(case
  when IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY='MACEDONIA' or lkp.NEW_COUNTRY_NAME is null then IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY
		 else lkp.NEW_COUNTRY_NAME 
end)))) as V_O_SHIP_TO_COUNTRY_LKP_FIX,

IF(id.DATA_SOURCE_key = '7', 
IF(upper(nvl(LKP_IQP_COUNTRY_CLEANER_BILL.CORRECTCOUNTRYNAME,upper(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_COUNTRY)))='UNITED KINGDOM'  and BILL_TO_CUSTOMER_NUMBER='40799','ALGERIA', UPPER(nvl(LKP_IQP_COUNTRY_CLEANER_BILL.CORRECTCOUNTRYNAME,upper(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_COUNTRY)))),
UPPER(nvl(LKP_IQP_COUNTRY_CLEANER_BILL.CORRECTCOUNTRYNAME,upper(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_COUNTRY)))) as V_O_BILL_TO_COUNTRY_FIX_LKP,

nvl(LKP_IQP_STATE_CODE_FIXER.STATECODE,if(trim(upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_STATE))='DIST OF COLUMBIA','DISTRICT OF COLUMBIA',upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_STATE)) ) as V_STATE_CODE_FIX_PC_PQ_COMM,
if(trim(upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_STATE))='DIST OF COLUMBIA','DISTRICT OF COLUMBIA',upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_STATE)) as V_SHIP_TO_STATE_FIX,

case 
 when id.data_source_key=10 then IQP_LEGACY_SALES_COMMON_STG.ORDER_TYPE
		else 'PRODUCT_SALES'
		end as ORDER_TYPE_PULSE,		
IQP_LEGACY_SALES_COMMON_STG.BAAN_PO as BAAN_PO,
IQP_LEGACY_SALES_COMMON_STG.EARLIEST_ACCEPTABLE_DATE as EARLIEST_ACCEPTABLE_DATE,
case 
  when gp.COUNTRY_NAME is null then gp1.REGION_NAME
		 else gp.REGION_NAME
		end as REGION,		
		  case 
  when gp.COUNTRY_NAME is null then gp1.SUB_REGION_NAME
		 else gp.SUB_REGION_NAME
		end as SUBREGION,
ibhd.tier2,
ibhd.tier3,
case when upper(ibhd.tier2)='GRID AUTOMATION' and ibhd.PNL='LENTRONICS' then ibhd.PNL else NULL end as V_SUBPNL	
FROM IQP_LEGACY_SALES_COMMON_STG left join
g00103.IQP_COUNTRY_NAME_LKP lkp on(lkp.SOURCE_COUNTRY_NAME = IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY) left join
(SELECT 
 max(IQP_GEOGRAPHY_DIM.REGION_CODE) as REGION_CODE,    
 max(IQP_GEOGRAPHY_DIM.REGION_NAME) as REGION_NAME,    
 max(IQP_GEOGRAPHY_DIM.COUNTRY_CODE) as COUNTRY_CODE,   
 IQP_GEOGRAPHY_DIM.COUNTRY_NAME as COUNTRY_NAME, 
 max(IQP_GEOGRAPHY_DIM.STATE_CODE) as STATE_CODE,
 max(IQP_GEOGRAPHY_DIM.SUB_REGION_NAME)   as SUB_REGION_NAME, 
 max(IQP_GEOGRAPHY_DIM.STATE_NAME) as STATE_NAME  
 FROM g00103.IQP_GEOGRAPHY_DIM  
 WHERE IQP_GEOGRAPHY_DIM.REGION_NAME IS NOT NULL
 group by IQP_GEOGRAPHY_DIM.COUNTRY_NAME) gp on(gp.COUNTRY_NAME=case
when upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY)='MACEDONIA' or lkp.NEW_COUNTRY_NAME is null then IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY
	   else lkp.NEW_COUNTRY_NAME 
	  end) left join																										
	(SELECT  
 max(IQP_GEOGRAPHY_DIM.REGION_CODE) as REGION_CODE,    
 max(IQP_GEOGRAPHY_DIM.REGION_NAME) as REGION_NAME,    
 max(IQP_GEOGRAPHY_DIM.COUNTRY_CODE) as COUNTRY_CODE,   
 IQP_GEOGRAPHY_DIM.COUNTRY_NAME as COUNTRY_NAME, 
 IQP_GEOGRAPHY_DIM.STATE_CODE as STATE_CODE,
 max(IQP_GEOGRAPHY_DIM.SUB_REGION_NAME)   as SUB_REGION_NAME, 
 max(IQP_GEOGRAPHY_DIM.STATE_NAME) as STATE_NAME  
 FROM g00103.IQP_GEOGRAPHY_DIM 
 WHERE IQP_GEOGRAPHY_DIM.REGION_NAME IS NOT NULL
 group by IQP_GEOGRAPHY_DIM.COUNTRY_NAME,IQP_GEOGRAPHY_DIM.STATE_CODE ) gp1 on(gp1.STATE_CODE=IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_STATE 
and gp1.COUNTRY_NAME=case
when IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY='MACEDONIA' or lkp.NEW_COUNTRY_NAME is null then IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY
	   else lkp.NEW_COUNTRY_NAME 
	  end)	left join
g00103.IQP_DATA_SOURCE_DIM id on(id.DATA_SOURCE_NAME=IQP_LEGACY_SALES_COMMON_STG.DATA_SOURCE)		left join
g00103.IQP_PRODUCT_CLASS_CLEANER cc on(cc.PRODUCT_CLASS =IQP_LEGACY_SALES_COMMON_STG.PRODUCT_CLASS_CODE) left join
(
select 
ACCOUNT_NUMBER,
DATA_SOURCE,
max(CUSTOMER_GROUP) as CUSTOMER_GROUP,
max(CUSTOMER_CLASSIFICATION) as CUSTOMER_CLASSIFICATION,
max(SHIP_TO_REGION) as SHIP_TO_REGION,
max(SHIP_TO_SUB_REGION) as SHIP_TO_SUB_REGION
from
g00103.IQP_CUSTOMER_DIM
group by ACCOUNT_NUMBER,DATA_SOURCE) cd on(cd.ACCOUNT_NUMBER=nvl(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER,IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NUMBER)  and cd.DATA_SOURCE=id.data_source_key) left join																					

(
select UPPER(trim(IQP_CUSTOMER_CLASS_REF.customer_number)) as CUSTOMER_NUMBER,
max(IQP_CUSTOMER_CLASS_REF.Customer_name) as CUSTOMER_NAME from 
g00103.IQP_CUSTOMER_CLASS_REF
group by UPPER(trim(IQP_CUSTOMER_CLASS_REF.customer_number)))LKP_IQP_CUSTOMER ON(LKP_IQP_CUSTOMER.CUSTOMER_NUMBER=IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER) 
left join
(
select UPPER(trim(IQP_CUSTOMER_CLASS_REF.customer_number)) as CUSTOMER_NUMBER,
max(IQP_CUSTOMER_CLASS_REF.Customer_name) as CUSTOMER_NAME from 
g00103.IQP_CUSTOMER_CLASS_REF
group by UPPER(trim(IQP_CUSTOMER_CLASS_REF.customer_number)))LKP_IQP_CUSTOMER_BILL ON(LKP_IQP_CUSTOMER_BILL.CUSTOMER_NUMBER=O_V_CUSTOMER_NUMBER(customer(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY,id.DATA_SOURCE_key,cast(NULL as string),nvl(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NUMBER,upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER)),cd.CUSTOMER_GROUP)))
left join
(
SELECT max(IQP_STATE_CODE_FIXER_LKP.STATECODE)   as STATECODE,
       max(IQP_STATE_CODE_FIXER_LKP.COUNTRYNAME) as COUNTRYNAME,
       UPPER(trim(IQP_STATE_CODE_FIXER_LKP.STATENAME))   as STATENAME
  FROM g00103.IQP_STATE_CODE_FIXER_LKP
  group by UPPER(trim(IQP_STATE_CODE_FIXER_LKP.STATENAME))
  )LKP_IQP_STATE_CODE_FIXER on(LKP_IQP_STATE_CODE_FIXER.STATENAME=upper(trim(IQP_LEGACY_SALES_COMMON_STG.ship_to_state)))

left join 
g00103.LKP_COUNTRYOVERRIDE LKP_COUNTRYOVERRIDE_CG on(LKP_COUNTRYOVERRIDE_CG.CUSTOMERNUMBER=customer(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY,id.DATA_SOURCE_key,cast(NULL as string),nvl(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NUMBER,upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER)),cd.CUSTOMER_GROUP))

left join
(
SELECT max(IQP_LEGACY_CATALOG_LIST_STG.PLANTCODE)          as PLANTCODE,
       UPPER(trim(IQP_LEGACY_CATALOG_LIST_STG.PRODUCTCLASS))       as PRODUCTCLASS,
       max(SUBSTR(IQP_LEGACY_CATALOG_LIST_STG.PRODUCTCLASS,1,2))       as PRODUCTCLASS_CODE,
       max(IQP_LEGACY_CATALOG_LIST_STG.SITE)               as SITE,
       max(IQP_LEGACY_CATALOG_LIST_STG.PRODUCTCLASS_ID)    as PRODUCTCLASS_ID,
       max(IQP_LEGACY_CATALOG_LIST_STG.PRODUCTDESCRIPTION) as PRODUCTDESCRIPTION,
       max(IQP_LEGACY_CATALOG_LIST_STG.PRODUCTLINE)        as PRODUCTLINE,
       max(IQP_LEGACY_CATALOG_LIST_STG.PRODUCT_SEGMENT)    as PRODUCT_SEGMENT,
       max(IQP_LEGACY_CATALOG_LIST_STG.PRODUCTCLASSGROUP)  as PRODUCTCLASSGROUP,
       max(IQP_LEGACY_CATALOG_LIST_STG.PRODUCT_PLATFORM)   as PRODUCT_PLATFORM
  FROM g00103.IQP_LEGACY_CATALOG_LIST IQP_LEGACY_CATALOG_LIST_STG
  WHERE IQP_LEGACY_CATALOG_LIST_STG.PRODUCT_PLATFORM= 'UR/UR+'
  group by UPPER(trim(IQP_LEGACY_CATALOG_LIST_STG.PRODUCTCLASS)) 
)LKP_PROD_CLASS on(LKP_PROD_CLASS.PRODUCTCLASS=nvl(cc.CORRECT_CLASS,IQP_LEGACY_SALES_COMMON_STG.PRODUCT_CLASS_CODE)) left join
(
SELECT IQP_COUNTRY_CLEANER_LKP.CORRECTCOUNTRYNAME as CORRECTCOUNTRYNAME,
       UPPER(trim(IQP_COUNTRY_CLEANER_LKP.COUNTRYNAME)) as COUNTRYNAME
  FROM g00103.IQP_COUNTRY_CLEANER_LKP
)LKP_IQP_COUNTRY_CLEANER on(LKP_IQP_COUNTRY_CLEANER.COUNTRYNAME=case
when upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY)='MACEDONIA' or lkp.NEW_COUNTRY_NAME is null then upper(trim(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY))
	   else upper(trim(lkp.NEW_COUNTRY_NAME)) 
	  end) left join  
(
SELECT IQP_COUNTRY_CLEANER_LKP.CORRECTCOUNTRYNAME as CORRECTCOUNTRYNAME,
       UPPER(trim(IQP_COUNTRY_CLEANER_LKP.COUNTRYNAME)) as COUNTRYNAME
  FROM g00103.IQP_COUNTRY_CLEANER_LKP
)LKP_IQP_COUNTRY_CLEANER_BILL on(LKP_IQP_COUNTRY_CLEANER_BILL.COUNTRYNAME=upper(trim(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_COUNTRY))) left join 	  
(
select 
ACCOUNT_NUMBER,
DATA_SOURCE,
max(CUSTOMER_GROUP) as CUSTOMER_GROUP,
max(CUSTOMER_CLASSIFICATION) as CUSTOMER_CLASSIFICATION,
max(SHIP_TO_REGION) as SHIP_TO_REGION,
max(SHIP_TO_SUB_REGION) as SHIP_TO_SUB_REGION
from
g00103.IQP_CUSTOMER_DIM
group by ACCOUNT_NUMBER,DATA_SOURCE) cb on(cb.ACCOUNT_NUMBER=nvl(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NUMBER,IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER)  and  cb.DATA_SOURCE=id.data_source_key)

left join (select plantcode_id ,max(tier2) tier2 ,max(tier3) tier3,max(PNL) as PNL from g00103.iqp_business_hier_dim group by plantcode_id ) ibhd on(ibhd.plantcode_id=upper(IQP_LEGACY_SALES_COMMON_STG.management_entity))
left join
(
select max(CASE WHEN (UPPER(IQP_LEGACY_CUSTOMER_CLASS_REF.CUSTOMER_CLASSIFICATION) ='INTERNAL' 
AND UPPER(IQP_LEGACY_CUSTOMER_CLASS_REF.CUSTOMER_GROUP_CODE) NOT IN
             ('INTERNAL','WITHIN DEPARTMENT')) THEN 'Within Department'
   
   WHEN (UPPER(IQP_LEGACY_CUSTOMER_CLASS_REF.CUSTOMER_CLASSIFICATION) ='EXTERNAL' 
     AND UPPER(IQP_LEGACY_CUSTOMER_CLASS_REF.CUSTOMER_GROUP_CODE) NOT IN
             ('EXTERNAL','WITHIN OTHER GE','WITHIN OWN ECHELON','WITHIN OWN SECTOR','WITHIN DIVISION')) THEN 'External'
        
  WHEN (UPPER(IQP_LEGACY_CUSTOMER_CLASS_REF.CUSTOMER_GROUP_CODE) IN ('MDS INTERNAL','INTERNAL')) THEN 'Within Department' 
    ELSE INITCAP(NVL(IQP_LEGACY_CUSTOMER_CLASS_REF.CUSTOMER_GROUP_CODE,'External')) END) as CUSTOMER_GROUP_CODE,
      
    UPPER(LTRIM(RTRIM(IQP_LEGACY_CUSTOMER_CLASS_REF.CUSTOMER_NUMBER))) as CUSTOMER_NUMBER
    FROM g00103.IQP_LEGACY_CUSTOMER_CLASS_REF
	group by UPPER(LTRIM(RTRIM(IQP_LEGACY_CUSTOMER_CLASS_REF.CUSTOMER_NUMBER)))
)LKP_LEGACY_CUSTOMER_GROUP on(LKP_LEGACY_CUSTOMER_GROUP.CUSTOMER_NUMBER=O_V_CUSTOMER_NUMBER(customer(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY,id.DATA_SOURCE_key,cast(NULL as string),nvl(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NUMBER,upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER)),cd.CUSTOMER_GROUP)))
left join
(select max(CASE WHEN (UPPER(IQP_CUSTOMER_CLASS_REF.CUSTOMER_CLASSIFICATION) ='INTERNAL' 
AND UPPER(IQP_CUSTOMER_CLASS_REF.CUSTOMER_GROUP_CODE) NOT IN
             ('INTERNAL','WITHIN DEPARTMENT')) THEN 'Within Department'
   
   WHEN (UPPER(IQP_CUSTOMER_CLASS_REF.CUSTOMER_CLASSIFICATION) ='EXTERNAL' 
     AND UPPER(IQP_CUSTOMER_CLASS_REF.CUSTOMER_GROUP_CODE) NOT IN
             ('EXTERNAL','WITHIN OTHER GE','WITHIN OWN ECHELON','WITHIN OWN SECTOR','WITHIN DIVISION')) THEN 'External'
        
  WHEN (UPPER(IQP_CUSTOMER_CLASS_REF.CUSTOMER_GROUP_CODE) IN ('MDS INTERNAL','INTERNAL')) THEN 'Within Department' 
    ELSE INITCAP(NVL(IQP_CUSTOMER_CLASS_REF.CUSTOMER_GROUP_CODE,'External')) END) as CUSTOMER_GROUP_CODE,
      
    UPPER(trim(IQP_CUSTOMER_CLASS_REF.CUSTOMER_NUMBER)) as CUSTOMER_NUMBER
    FROM g00103.IQP_CUSTOMER_CLASS_REF
	group by UPPER(trim(IQP_CUSTOMER_CLASS_REF.CUSTOMER_NUMBER)))LKP_CUSTOMER_GROUP on(LKP_CUSTOMER_GROUP.CUSTOMER_NUMBER=O_V_CUSTOMER_NUMBER(customer(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY,id.DATA_SOURCE_key,cast(NULL as string),nvl(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NUMBER,upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER)),cd.CUSTOMER_GROUP)))
	left join
	(SELECT  max(CASE WHEN (UPPER(IQP_CUSTOMER_CLASS_REF.CUSTOMER_CLASSIFICATION) ='INTERNAL') 
THEN 'Within Department' ELSE INITCAP(IQP_CUSTOMER_CLASS_REF.CUSTOMER_CLASSIFICATION)
       END) AS CUSTOMER_CLASSIFICATION,
       UPPER(trim(IQP_CUSTOMER_CLASS_REF.CUSTOMER_NUMBER)) as CUSTOMER_NUMBER
FROM g00103.IQP_CUSTOMER_CLASS_REF
group by  UPPER(trim(IQP_CUSTOMER_CLASS_REF.CUSTOMER_NUMBER))	)LKP_CUSTOMER_GROUP_SALES on(LKP_CUSTOMER_GROUP_SALES.CUSTOMER_NUMBER=O_V_CUSTOMER_NUMBER(customer(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY,id.DATA_SOURCE_key,cast(NULL as string),nvl(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NUMBER,upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER)),cd.CUSTOMER_GROUP)))

left join
(SELECT  max(CASE WHEN (UPPER(IQP_LEGACY_CUSTOMER_CLASS_REF.CUSTOMER_CLASSIFICATION) ='INTERNAL') 
THEN 'Within Department' ELSE INITCAP(IQP_LEGACY_CUSTOMER_CLASS_REF.CUSTOMER_CLASSIFICATION)
       END) AS CUSTOMER_CLASSIFICATION,
       UPPER(trim(IQP_LEGACY_CUSTOMER_CLASS_REF.CUSTOMER_NUMBER)) as CUSTOMER_NUMBER
       FROM g00103.IQP_LEGACY_CUSTOMER_CLASS_REF
	   group by UPPER(trim(IQP_LEGACY_CUSTOMER_CLASS_REF.CUSTOMER_NUMBER)) )LKP_LEGACY_CUST_GROUP_SALES on(LKP_LEGACY_CUST_GROUP_SALES.CUSTOMER_NUMBER=O_V_CUSTOMER_NUMBER(customer(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY,id.DATA_SOURCE_key,cast(NULL as string),nvl(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NUMBER,upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER)),cd.CUSTOMER_GROUP)))
left join
g00103.LKP_COUNTRYOVERRIDE LKP_COUNTRYOVERRIDE on(LKP_COUNTRYOVERRIDE.CUSTOMERNUMBER=O_V_CUSTOMER_NUMBER(customer(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_COUNTRY,id.DATA_SOURCE_key,cast(NULL as string),nvl(IQP_LEGACY_SALES_COMMON_STG.BILL_TO_CUSTOMER_NUMBER,upper(IQP_LEGACY_SALES_COMMON_STG.SHIP_TO_CUSTOMER_NUMBER)),cd.CUSTOMER_GROUP)))
""").createOrReplaceTempView("mytempTable") 

spark.sql("cache table mytempTable").repartition(20)


val df_lkp_data_source_dim =spark.sql("""select max(DATA_SOURCE_NAME) as DATA_SOURCE_NAME,data_source_key 
from g00103.iqp_data_source_dim group by data_source_key""")
df_lkp_data_source_dim.createOrReplaceTempView("intl_tbl_data_source")
spark.sql("CACHE TABLE intl_tbl_data_source")



//final write with expressions

val finalresulttowrite=spark.sql("""select NULL as customer_trx_id,
invoice_header_id,
primary_salesrep_id,
sold_to_customer_id,
bill_to_customer_id,
bill_to_site_use_id,
ship_to_customer_id,
ship_to_contact_id,
ship_to_site_use_id,
invoice_currency_code,
remit_to_address_id,
related_customer_trx_id,
invoicing_rule_id,
customer_bank_account_id,
paying_customer_id,
paying_site_use_id,
doc_sequence_id,
cust_trx_all_org_id,
invoice_number,
cust_trx_all_reason_code,
printing_option,
printing_count,
printing_pending,
purchase_order,
purchase_order_revision,
customer_reference,
cust_trx_line_gl_dist_comments,
internal_notes,
exchange_rate_type,
exchange_rate,
last_printed_sequence_num,
credit_method_for_rules,
credit_method_for_installments,
ship_via,
waybill_number,
fob_point,
interface_header_context,
recurred_from_trx_number,
status_trx,
doc_sequence_value,
approval_code,
old_trx_number,
ct_reference,
ship_date_actual,
end_date_commitment,
start_date_commitment,
exchange_date,
printing_last_printed,
cust_trx_all_wh_update_date,
customer_reference_date,
invoice_date,
term_due_date,
printing_original_date,
purchase_order_date,
complete_flag,
default_tax_exempt_flag,
interface_header_attribute1,
interface_header_attribute6,
bill_to_contact_id,
batch_id,
cust_trx_all_attribute3,
batch_source_id,
batch_sources_all_org_id,
batch_sources_all_name,
cust_trx_type_id,
cust_trx_types_all_org_id,
cust_trx_types_all_name,
type,
NULL,
row_id,
term_id,
printing_lead_days,
ra_terms_name,
NULL as cust_billto_cust_account_id,
NULL as cust_billto_cust_site_uses_site_use_id,
case 
   when a.DATA_SOURCE='10' then  a.CUSTOMER_GROUP
	 else V_O_CUSTOMER_GROUP(a.V_CUSTOMER_NUMBER_CG,a.O_P_CUSTOMER_NUMBER_legacy,a.date_flag1,a.lkp_value,a.data_flag2,a.DATA_SOURCE,a.CUSTOMER_GROUP,a.O_P_CUSTOMER_NUMBER)
end as customer_group,  
case 
   when a.DATA_SOURCE='10' then  a.CUSTOMER_GROUP
	 else V_O_CUSTOMER_GROUP(a.V_CUSTOMER_NUMBER_CG,a.O_P_CUSTOMER_NUMBER_legacy,a.date_flag1,a.lkp_value,a.data_flag2,a.DATA_SOURCE,a.CUSTOMER_GROUP,a.O_P_CUSTOMER_NUMBER)
end as bill_to_cust_group,
IF(((V_REGION_COUNTRY(a.DATA_SOURCE,a.WAREHOUSE_NAME,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp))='UNITED STATES') 
     AND V_REGION_STATE(a.WAREHOUSE_NAME,a.SHIP_TO_STATE,V_SHIP_TO_STATE_L(V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp),a.date_flag1,a.SHIP_TO_COUNTRY,a.DATA_SOURCE,a.V_STATE_CODE_FIX_PC_PQ_COMM,a.V_SHIP_TO_STATE_FIX))
     in('PR','VI')),'Latin America',nvl(LKP_IQP_REF_POLE_D3_REGION.WORLDPOLE,a.region)) as bill_to_region,

O_O_SUBREGION(V_REGION_COUNTRY(a.DATA_SOURCE,a.WAREHOUSE_NAME,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp))
,LKP_IQP_REF_POLE_STATES_SUBREGION_US_CAN_SUB.REGION,LKP_IQP_REF_POLE_D3_REGION.worldpole,a.SUBREGION) as bill_to_sub_region,
bill_to_customer_name,
bill_to_customer_number,
case 
  when a.DATA_SOURCE='10' then a.BILL_TO_CLASSIFY
  else 
    case 
	  when V_O_CUSTOMER_GROUP(a.V_CUSTOMER_NUMBER_CG,a.O_P_CUSTOMER_NUMBER_legacy,a.date_flag1,a.lkp_value,a.data_flag2,a.DATA_SOURCE,a.CUSTOMER_GROUP,a.O_P_CUSTOMER_NUMBER)="Within Department" then "Internal"
	  else "External"
	end 
end as bill_to_classify,
bill_to_address1,
bill_to_address2,
bill_to_address3,
bill_to_address4,
bill_to_city,
IF(nvl(a.V_CUSTOMER_NUMBER_CG_lkp,ship_bill_l(LKP_IQP_COUNTRYCODE_BILL.COUNTRY_NAME,a.V_O_BILL_TO_COUNTRY_FIX_LKP,length(a.V_O_BILL_TO_COUNTRY_FIX_LKP)))='CANADA','ON',
IF(nvl(a.V_CUSTOMER_NUMBER_CG_lkp,ship_bill_l(LKP_IQP_COUNTRYCODE_BILL.COUNTRY_NAME,a.V_O_BILL_TO_COUNTRY_FIX_LKP,length(a.V_O_BILL_TO_COUNTRY_FIX_LKP))) in ('UNITED STATES','US'),'NY',NULL)) bill_to_state,
ship_bill_l(LKP_IQP_COUNTRYCODE_BILL.COUNTRY_NAME,a.V_O_BILL_TO_COUNTRY_FIX_LKP,length(a.V_O_BILL_TO_COUNTRY_FIX_LKP)) as bill_to_country,
bill_to_county,
bill_to_postal_code,
bill_to_province,
NULL as cust_shipto_cust_account_id,
NULL as cust_shipto_cust_site_uses_site_use_id,
case 
   when DATA_SOURCE='10' then  a.CUSTOMER_GROUP
	 else V_O_CUSTOMER_GROUP(a.V_CUSTOMER_NUMBER_CG,a.O_P_CUSTOMER_NUMBER_legacy,a.date_flag1,a.lkp_value,a.data_flag2,a.DATA_SOURCE,a.CUSTOMER_GROUP,a.O_P_CUSTOMER_NUMBER)
end as ship_to_cust_group,
IF(((V_REGION_COUNTRY(a.DATA_SOURCE,a.WAREHOUSE_NAME,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp))='UNITED STATES') 
     AND V_REGION_STATE(a.WAREHOUSE_NAME,a.SHIP_TO_STATE,V_SHIP_TO_STATE_L(V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp),a.date_flag1,a.SHIP_TO_COUNTRY,a.DATA_SOURCE,a.V_STATE_CODE_FIX_PC_PQ_COMM,a.V_SHIP_TO_STATE_FIX))
     in('PR','VI')),'Latin America',nvl(LKP_IQP_REF_POLE_D3_REGION.WORLDPOLE,a.region)) as region,
	 
IF(((V_REGION_COUNTRY(a.DATA_SOURCE,a.WAREHOUSE_NAME,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp))='UNITED STATES') 
     AND V_REGION_STATE(a.WAREHOUSE_NAME,a.SHIP_TO_STATE,V_SHIP_TO_STATE_L(V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp),a.date_flag1,a.SHIP_TO_COUNTRY,a.DATA_SOURCE,a.V_STATE_CODE_FIX_PC_PQ_COMM,a.V_SHIP_TO_STATE_FIX))
     in('PR','VI')),'Latin America',nvl(LKP_IQP_REF_POLE_D3_REGION.WORLDPOLE,a.region)) as ship_to_region,
	 
O_O_SUBREGION(V_REGION_COUNTRY(a.DATA_SOURCE,a.WAREHOUSE_NAME,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp))
,LKP_IQP_REF_POLE_STATES_SUBREGION_US_CAN_SUB.REGION,LKP_IQP_REF_POLE_D3_REGION.worldpole,a.SUBREGION) as ship_to_sub_region,

O_O_SUBREGION(V_REGION_COUNTRY(a.DATA_SOURCE,a.WAREHOUSE_NAME,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp))
,LKP_IQP_REF_POLE_STATES_SUBREGION_US_CAN_SUB.REGION,LKP_IQP_REF_POLE_D3_REGION.worldpole,a.SUBREGION)	as subregion,
ship_to_customer_name,
ship_to_customer_number,
case 
  when DATA_SOURCE='10' then a.BILL_TO_CLASSIFY
  else 
    case 
	  when V_O_CUSTOMER_GROUP(a.V_CUSTOMER_NUMBER_CG,a.O_P_CUSTOMER_NUMBER_legacy,a.date_flag1,a.lkp_value,a.data_flag2,a.DATA_SOURCE,a.CUSTOMER_GROUP,a.O_P_CUSTOMER_NUMBER)="Within Department" then "Internal"
	  else "External"
	end 
end as ship_to_classify,
ship_to_address1,
ship_to_address2,
ship_to_address3,
ship_to_address4,
ship_to_city,
V_SUB_REGION_SHIP_TO_STATE_L(V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp)
,LKP_IQP_REF_POLE_STATES_SUBREGION_US_CAN.REGION,V_SHIP_TO_STATE_L(V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp),a.date_flag1,a.SHIP_TO_COUNTRY,a.DATA_SOURCE,a.V_STATE_CODE_FIX_PC_PQ_COMM,a.V_SHIP_TO_STATE_FIX)) as ship_to_state,

V_SHIP_TO_COUNTRY_KOREA(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX))) as ship_to_country,ship_to_county,
ship_to_postal_code,
ship_to_province,
organization_name,
NULL as salesman_name,
NULL as salesman_engineer,
customer_trx_line_id,
NULL as cust_trx_lines_all_customer_trx_id,
inventory_item_id,
previous_customer_trx_id,
previous_customer_trx_line_id,
accounting_rule_id,
link_to_cust_trx_line_id,
vat_tax_id,
tax_exemption_id,
memo_line_id,
cust_trx_lines_all_org_id,
warehouse_id,
line_number,
cust_trx_lines_all_reason_code,
quantity_ordered,
quantity_credited,
quantity_invoiced,
unit_standard_price,
sales_order,
sales_order_line,
accounting_rule_duration,
line_type,
interface_line_context,
interface_line_attribute6,
sales_order_source,
extended_amount,
tax_precedence,
tax_rate,
autorule_duration_processed,
uom_code,
autotax,
last_period_to_credit,
tax_exempt_number,
tax_exempt_reason_code,
tax_vendor_return_code,
gross_unit_selling_price,
unit_selling_price,
gross_extended_amount,
taxable_amount,
invoiced_line_acctg_level,
translated_description,
cust_trx_lines_all_description,
rule_end_date,
cust_trx_lines_wh_update_date,
sales_order_date,
rule_start_date,
autorule_complete_flag,
tax_exempt_flag,
amount_includes_tax_flag,
REQUISITION_NUMBER,
revenue_amount,
material_cost,
material_overhead,
osp_cost,
overhead_cost,
labor_cost,
cw_est_overhead_cost,
cw_est_material_cost,
cw_est_labour_cost,
cw_estimated_item_cost,
cw_est_outsdprocess_cost,
cw_est_material_ovh_cost,
cw_make_buy,
item_long_description,
product_number,
warehouse_name,
cw_business,
cw_go_schedule,
cw_family_id,
legProductGroup(product_number,ORGANIZATION_NAME,PRODUCTCLASS,PRODUCTCLASSGROUP,intl_tbl_data_source.data_source_name,MANAGEMENT_ENTITY) as product_group,
legProductLine(TIER2 ,product_number,ORGANIZATION_NAME,PRODUCTCLASS,PRODUCTCLASSGROUP,PRODUCTLINE) as product_line,
legSubProductLine(TIER2 , product_number ,ORGANIZATION_NAME,PRODUCTCLASS,PRODUCTCLASSGROUP) as sub_PRODUCT_LINE,
a.PRODUCTCLASS,
legProductPlatform(product_number,ORGANIZATION_NAME,PRODUCTCLASS,PRODUCTCLASSGROUP,intl_tbl_data_source.data_source_name,MANAGEMENT_ENTITY,product_platform,project_number) as product_platform ,
legProductSegment(TIER2 ,product_number,ORGANIZATION_NAME,PRODUCTCLASS,PRODUCTCLASSGROUP) as product_segment,
IF((a.V_MANAGEMENT_ENTITY='PCBR' and   INSTR(a.REVISED_CHANNEL,'DE553SCFNEWORAL - SILMARA NE') != '0' and INSTR(a.IMPORTING_TEXTFILE,'Brazil') != '0'),'SSBR',a.V_MANAGEMENT_ENTITY) as MANAGEMENT_ENTITY,
legBusinessSegment(product_number,ORGANIZATION_NAME,PRODUCTCLASS,PRODUCTCLASSGROUP,TIER2,TIER3,legProductPlatform(product_number,ORGANIZATION_NAME,PRODUCTCLASS,PRODUCTCLASSGROUP,DATA_SOURCE,MANAGEMENT_ENTITY,product_platform,project_number)) as business_segment,
legOrderTypePulse(TIER2,TIER3,intl_tbl_data_source.data_source_name,order_type,legProductPlatform(product_number,ORGANIZATION_NAME,PRODUCTCLASS,PRODUCTCLASSGROUP,intl_tbl_data_source.data_source_name,MANAGEMENT_ENTITY,product_platform,project_number)) as order_type_pulse,
item_type_code,
producing_plant,
cust_trx_line_gl_dist_id,
NULL as gl_dist_all_customer_trx_line_id,
code_combination_id,
set_of_books_id,
request_id,
program_application_id,
program_id,
posting_control_id,
cust_trx_line_gl_dist_org_id,
acctd_amount,
percents,
account_class,
concatenated_segments,
cust_trx_all_comments,
gl_posted_date,
NULL as distributions_orginal_amount,
gl_date,
original_gl_date,
account_set_flag,
rec_offset_flag,
latest_rec_flag,
conversion_date,
gl_dist_all_last_update_date,
cw_sales_ledger_account,
NULL,
conversion_rate,
TOTAL_INVOICE_LINE_AMOUNT,
amount,
record_inserted_by,
record_updated_by,
record_inserted_date,
record_updated_date,
span,
componentflag,
cw_cost_of_goods_sold_acc,
cw_inco_terms,
cw_mat_percentage_of_sales,
family,
NULL as market,
productclass_id,
productdescription,
approach_code,
atm_code,
baan_po,
bill_unit_code,
cash_discount,
cesd_user_number,
channel_id,
charge_to_customer_number,
commision,
current_schedule_date,
customer_group_code,
customer_order_date,
customer_po_nbr,
customer_request_date,
customer_type_description,
district_code,
earliest_acceptable_date,
end_destination_country,
family_busrpt,
freight,
frst_cust_delivery_date,
frst_cust_ship_date,
gross_sales,
id_identity,
importing_textfile,
ledger_code,
major_line_code,
manufacturing_description,
office_taken_code,
oracle_order_number,
order_receipt_date,
order_status_code,
order_type,
process_date,
product_class_rma,
product_line_rma,
product_platform_rma,
project_number,
ro_number,
sales_account,
sales_cost_centre,
sales_engineer_code,
sales_engineer_name,
sequence_number,
ship_method,
shippingwarehousecode,
nvl(LKP_SITE.site,a.site),
spa_number,
subsection,
transaction_type,
unit_list_price,
unit_weight,
user_customer_number,
plant_desc(a.DATA_SOURCE,a.plantcode_id,nvl(LKP_SITE.site,a.site),a.V_SUBPNL,a.PRODUCT_PLATFORM,nvl(IQP_PRODUCING_PLANT_REF.PLANT_DESCRIPTION,a.PLANT_DESCRIPTION),a.MANAGEMENT_ENTITY) as plant_description,
nvl(IQP_PRODUCING_PLANT_REF.PLANT_MANAGER_NAME,'UNKNOWN')  plant_manager_name,
account_number_buyer,
baan_order_number,
billto_sitenumber,
cash_discounts,
city_name,
cmf_compliance_code,
current_ship_date,
customer_po_date,
delivery_line_item,
delivery_no,
dist_ch_id,
end_destination_state,
end_user_name,
foreign_currency_net_amount,
go_class_code,
invoice_prefix,
invoice_type,
net_quantity,
non_ge_part_cost,
overhead,
product_group_rma,
productclass,
replenishment_source,
replinisment_source,
ORDER_NUMBER,
revised_channel,
sales_channel,
sales_engineer,
salesmanagercode,
shipstatecode,
shipto_sitenumber,
soldto_city,
soldto_sitenumber,
state_name,
terms_code_description,
title_transfer_terms,
world_pole,
report_process1,
NULL as sold_to_country,
upper(a.SHIP_TO_STATE) sold_to_state,
a.O_V_CUSTOMER_NUMBER,
cw_end_customer_name,
businesssegment,
ibf.plantcode_id,
data_source
 from 
mytempTable a  left join g00103.IQP_COUNTRYCODE_LKP LKP_IQP_COUNTRYCODE_SHIP on(a.V_O_SHIP_TO_COUNTRY_LKP_FIX=LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_CODE)
   left join g00103.IQP_REF_POLE_STATES_LKP LKP_IQP_REF_POLE_STATES_SUBREGION_US_CAN 
   on(upper(trim(LKP_IQP_REF_POLE_STATES_SUBREGION_US_CAN.COUNTRYNAME))=upper(V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),a.O_V_CUSTOMER_NUMBER_lkp)) and
     upper(trim(LKP_IQP_REF_POLE_STATES_SUBREGION_US_CAN.STATECODE))=upper(V_SHIP_TO_STATE_L(V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp),a.date_flag1,a.SHIP_TO_COUNTRY,a.DATA_SOURCE,a.V_STATE_CODE_FIX_PC_PQ_COMM,a.V_SHIP_TO_STATE_FIX)))
  
   left join g00103.IQP_COUNTRYCODE_LKP LKP_IQP_COUNTRYCODE_BILL on(LKP_IQP_COUNTRYCODE_BILL.COUNTRY_CODE=a.V_O_BILL_TO_COUNTRY_FIX_LKP)
   left join
   (
   SELECT max(IQP_REF_POLE_D3_LKP.WORLDPOLE)      as WORLDPOLE,
         max(IQP_REF_POLE_D3_LKP.WORLDSUBPOLE)   as WORLDSUBPOLE,
         UPPER(trim(IQP_REF_POLE_D3_LKP.COUNTRYNAME_ID)) as COUNTRYNAME_ID
    FROM g00103.IQP_REF_POLE_D3_LKP
	group by UPPER(trim(IQP_REF_POLE_D3_LKP.COUNTRYNAME_ID))) LKP_IQP_REF_POLE_D3_REGION on(LKP_IQP_REF_POLE_D3_REGION.COUNTRYNAME_ID=upper(V_REGION_COUNTRY(a.DATA_SOURCE,a.WAREHOUSE_NAME,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp))))
   
   left join g00103.IQP_REF_POLE_STATES_LKP LKP_IQP_REF_POLE_STATES_SUBREGION_US_CAN_SUB
   
   on ( upper(trim(LKP_IQP_REF_POLE_STATES_SUBREGION_US_CAN_SUB.COUNTRYNAME))=upper(V_REGION_COUNTRY(a.DATA_SOURCE,a.WAREHOUSE_NAME,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp)))
    and  upper(trim(LKP_IQP_REF_POLE_STATES_SUBREGION_US_CAN_SUB.STATECODE))=upper(V_REGION_STATE(a.WAREHOUSE_NAME,a.SHIP_TO_STATE,V_SHIP_TO_STATE_L(V_SHIP_TO_COUNTRY_L1L2(a.DATA_SOURCE,a.O_V_CUSTOMER_NUMBER,ship_bill_l(LKP_IQP_COUNTRYCODE_SHIP.COUNTRY_NAME,a.V_O_SHIP_TO_COUNTRY_LKP_FIX,length(a.V_O_SHIP_TO_COUNTRY_LKP_FIX)),O_V_CUSTOMER_NUMBER_lkp),a.date_flag1,a.SHIP_TO_COUNTRY,a.DATA_SOURCE,a.V_STATE_CODE_FIX_PC_PQ_COMM,a.V_SHIP_TO_STATE_FIX))))
   
   left join 
   (select plantcode_id from 
   g00103.iqp_business_hier_dim
    group by  plantcode_id)  ibf on(ibf.plantcode_id=IF((a.V_MANAGEMENT_ENTITY='PCBR' and   INSTR(a.REVISED_CHANNEL,'DE553SCFNEWORAL - SILMARA NE') != '0' and INSTR(a.IMPORTING_TEXTFILE,'Brazil') != '0'),'SSBR',a.V_MANAGEMENT_ENTITY))
   left join
 (SELECT 'ITI' as SITE,UPPER(trim(IQP_LEGACY_CATALOG_LIST_STG.PLANTCODE)) as PLANTCODE
FROM g00103.IQP_LEGACY_CATALOG_LIST IQP_LEGACY_CATALOG_LIST_STG
WHERE IQP_LEGACY_CATALOG_LIST_STG.PRODUCTDESCRIPTION ='ITI'

)LKP_SITE on(LKP_SITE.PLANTCODE=a.MANAGEMENT_ENTITY)
 left join
(select trim(upper(PLANTCODE_ID)) as PLANTCODE_ID,max(PLANT_DESCRIPTION) as PLANT_DESCRIPTION,max(PLANT_MANAGER_NAME) as PLANT_MANAGER_NAME
from  g00103.IQP_PRODUCING_PLANT_REF
group by trim(upper(PLANTCODE_ID)))IQP_PRODUCING_PLANT_REF on(IQP_PRODUCING_PLANT_REF.PLANTCODE_ID=upper(a.MANAGEMENT_ENTITY))
left join intl_tbl_data_source on  intl_tbl_data_source.data_source_key = a.DATA_SOURCE
""").repartition(20).createOrReplaceTempView("to_write") 

spark.sql("insert into g00103.iqp_invoice_mgmt_fact partition(data_source) select * from to_write")

if (deBug) Utils.printLog(deBug, tableName + ": Processing Completed ...")

} catch {
  case e: Throwable => {
          isSuccess=false
          errorMessage=e.getMessage()
      
                
  }
        }
  finally {
    val status = if (isSuccess) "SUCCESS" else "FAILED"
    if (deBug) Utils.printLog(deBug, tableName + ": Writing to audit table with status: " + status)
   	 import spark.implicits._
	    val dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss")
        val auditTable =  "g00103.spark_ingestion_audit"
	    val insertAudit = AuditTableSchema(batchNumber, srctableName, tableName, "NA", 0,
                                       dateFormat.format(beforeTimestamp), dateFormat.format(System.currentTimeMillis) , status,
                                       (System.currentTimeMillis - beforeTimestamp) / 1000, errorMessage)
    spark.createDataFrame(List(insertAudit)).write.mode("append").insertInto(auditTable)
   // Utils.auditRecord(spark, Utils.AuditRecord(batchNumber, tableName, beforeTimestamp, status, errorMessage))
    spark.stop
    
  }

  }
}


