-- Function: al_gem_gs.iqp_external_table_load_script(text)

-- DROP FUNCTION al_gem_gs.iqp_external_table_load_script(text);

CREATE OR REPLACE FUNCTION al_gem_gs.iqp_external_table_load_script(IN p_group_number text, OUT retcode integer)
  RETURNS integer AS
$BODY$
DECLARE
    tab_rec         RECORD;
    col_rec         RECORD;
    pi_statement    text;  -- for insert
    l_group_str     text;
    l_where_str     text;
    l_col_names     text; 
    l_load_number   text;
    l_insert_status text;
    l_record_count  int;
    l_start_time    timestamp;
    l_end_time      timestamp;
    l_parent_refresh_date timestamp; 
    l_error         boolean; 
BEGIN
    RAISE NOTICE 'Begin Program ...';

    l_load_number := to_char(clock_timestamp(), 'DD-MON-YYYY HH24:MI:SS.US');

    --Validate group_number value
    if (p_group_number = '-1') then
        l_group_str := '';
    else
        l_group_str := ' and group_number IN ('||p_group_number||')';
    end if;

    -- cursor to get list of table names, if refresh_date is null then use current_timestamp
    FOR tab_rec IN
     EXECUTE 'select master_id, schema_name, target_table_name, '||
             ' coalesce(inc_refresh_date,current_timestamp) as inc_refresh_date, '||
             ' table_name, trim(filter_condition) as filter_condition, '||
             ' parent_master_id '|| 
             ' from al_gem_gs.gs_iqp_master_table '||
             ' where 1=1 '||l_group_str||
             ' and coalesce(upper(enabled_flag),''Y'') = ''Y'' '||
             ' order by 1,2'
    LOOP

       pi_statement := null;
       l_insert_status := null;
       l_record_count := 0;
       l_error := false; 

       --Build Filter condition, it uses regular expression replace on filter_condition. Ignore Case and All replace
       -- replace "@current_date@" with system current date
       -- replace "@current_timestamp@" with system current timestamp
       -- replace "@current_times@" with system current time
       -- replace "@inc_refresh_date@" with inc_refresh_date value from current record of al_gem_gs.gs_iqp_master_table
       -- replace "@last_day@" with last day of current date
       -- replace "@localtimestamp@" with timestamp without timezone
       -- replace "@parent_refresh_date@" with inc_refresh_date value from parent record based n parent_master_id
       if (tab_rec.filter_condition is not null) then
          --Get parent refresh date based on parent_master_id
           l_parent_refresh_date := current_timestamp;
           if (strpos(lower(tab_rec.filter_condition),'@parent_refresh_date@') > 0) then
           begin
             select coalesce(refresh_date, current_timestamp)
             into l_parent_refresh_date
             from al_gem_gs.gs_iqp_master_table
             where master_id = tab_rec.parent_master_id;
           exception
             when others then
               null;
           end;
           end if;

           l_where_str := ' and '||
             regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(
                     tab_rec.filter_condition,
                          '@inc_refresh_date@',quote_literal(tab_rec.inc_refresh_date),'ig'),
                          '@current_date@', quote_literal(current_date),'ig'),
                          '@current_timestamp@', quote_literal(current_timestamp),'ig'),
                          '@current_time@',quote_literal(current_time),'ig'),
                          '@last_day@', quote_literal((date_trunc('MONTH', current_date)+INTERVAL '1 MONTH - 1 day')::DATE),'ig'),
                          '@localtimestamp@',quote_literal(localtimestamp),'ig'),
                          '@parent_refresh_date@',quote_literal(l_parent_refresh_date),'ig');
        else
           l_where_str := '';
        end if;

        --List of Columns of a table, using regular expression replace for certain character columns
        l_col_names := '';
        FOR col_rec in
        EXECUTE 'select column_name, data_type, character_maximum_length '||
                ' from information_schema.columns '||
                ' where table_schema = '||quote_literal(tab_rec.schema_name)||
                ' and table_name = '||quote_literal(tab_rec.table_name)||
                ' order by ordinal_position'
        LOOP
          if ((col_rec.data_type = 'character varying') and
              (col_rec.character_maximum_length > 30) and
              (col_rec.column_name != 'name')) then
            l_col_names := l_col_names ||
                            'regexp_replace('||col_rec.column_name||', '||
                            quote_literal(E'\u0011')||', '''', '||
                            quote_literal('g') ||') '|| col_rec.column_name||', ';
          else
             l_col_names := l_col_names ||' '||col_rec.column_name ||', ';
          end if;

        END LOOP;
        l_col_names := substring(l_col_names from 1 for (length(l_col_names) - 2));

       pi_statement := 'INSERT INTO al_gem_gs.'||tab_rec.target_table_name||' SELECT '||l_col_names||' FROM '||
                       tab_rec.schema_name||'.'||tab_rec.table_name||
                       ' where 1=1 '||l_where_str ||' ;';

       l_start_time := clock_timestamp();

		 -- Dynamic SQL Insert Statement execution
		 begin
		   --RAISE NOTICE 'Insert Statement: %', pi_statement;
		   EXECUTE pi_statement;
		   get diagnostics l_record_count = row_count;
		   RAISE NOTICE 'Inserted % records in table %  ... Success', l_record_count, tab_rec.target_table_name;
		   l_insert_status := 'Success';
       l_error := false;
		 exception
		   when others then
			 RAISE NOTICE '***Insert % Error: %',tab_rec.target_table_name, sqlerrm;
			 l_insert_status := 'Error~'||sqlerrm;
       l_error := true;
		 end;

	   l_end_time := clock_timestamp();

     -- Update inc_refresh_date for Successful records
     if (l_insert_status = 'Success') then
       begin
            update al_gem_gs.gs_iqp_master_table
              set inc_refresh_date = clock_timestamp()
              where master_id = tab_rec.master_id;
        exception
            when others then
            l_error := true;
            l_insert_status := tab_rec.table_name||': inc_refresh_date Update failed: '||sqlerrm;
        end;
     end if;

     -- Insert Audit information
     begin
        insert into al_gem_gs.gs_iqp_audit_table (
          load_number  ,
    		  schema_name ,
    		  target_table_name ,
    		  insert_date ,
    		  insert_status ,
    		  runtime ,
    		  record_count,
          master_id )
  	    values
    		  (l_load_number,
    		   tab_rec.schema_name,
    		   tab_rec.target_table_name,
    		   clock_timestamp(),
    		   l_insert_status,
    		   l_end_time - l_start_time,
    		   l_record_count,
           tab_rec.master_id);
      exception
         when others then
            l_error := true;
            RAISE NOTICE 'Error During Insert into al_gem_gs.gs_iqp_audit_table: %',sqlerrm;
      end;
     -- Exit further processing on error
     exit when l_error;
    END LOOP;

    if (l_error) then
       retcode := 1;
    else
       retcode := 0;
    end if;
    RAISE NOTICE 'End Program ...';

END;
$BODY$
  LANGUAGE plpgsql VOLATILE;
ALTER FUNCTION al_gem_gs.iqp_external_table_load_script(text)
  OWNER TO ec_data_al_gem_gs_updater;
