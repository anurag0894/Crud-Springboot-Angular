/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'C839130' at '07/02/17 22:44' with Gradle 2.12
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.12/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

apply plugin: 'maven'
apply plugin: 'eclipse'

group = 'com.bnsf.hd'
version = "$vrsn"

description = "Ingestion Validation"
jar.baseName = 'data-validation'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {     
    maven {
         url "http://artifactory.bnsf.com:8081/artifactory/repo"
    } 
} 
 
 
// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    // compile 'org.slf4j:slf4j-api:1.7.21'

    // https://mvnrepository.com/artifact/log4j/log4j
    // compile group: 'log4j', name: 'log4j', version: '1.2.17'

    // https://mvnrepository.com/artifact/com.sun.jdmk/jmxtools
   // compile group: 'com.sun.jdmk', name: 'jmxtools', version: '1.2.1'
   // compile files("lib/jmxtools-1.2.1.jar")

    // compile 'hadoop-common-2.7.3.2.5.0.2-3.jar'
    // compile group: 'org.apache.hadoop', name: 'spark-assembly', version: '1.6.2.2.5.0.2-3-hadoop2.7.3.2.5.0.2-3'
    // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-client
    // compile group: 'org.apache.hadoop', name: 'hadoop-client', version: '2.7.3'

    // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common
    //DBG compile group: 'org.apache.hadoop', name: 'hadoop-common', version: '2.7.3.2.5.0.2-3'
    // compile files("lib/hadoop-common-2.7.3.2.5.0.2-3.jar")
    // compile files("lib/hive-exec-1.2.1000.2.5.0.2-3.jar")


    // compile group: 'junit', name: 'junit', version: '4.12'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    // compile group: 'org.apache.commons', name: 'commons-lang', version: '2.6'

    // https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
    // compile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
//compile(group: 'org.owasp.esapi', name: 'esapi', version: '2.0.1')    
compile files("lib/esapi-2.0.1.jar") 
compile files("lib/jmxtools-1.2.1.jar")
compile files("lib/commons-collections-3.2.2.jar")
compile files("lib/commons-configuration-1.6.jar")
compile files("lib/commons-exec-1.1.jar")
compile files("lib/db2jcc4.jar")
compile files("lib/hadoop-auth-2.7.3.2.5.0.2-3.jar")
compile files("lib/hadoop-common-2.7.3.2.5.0.2-3.jar")
compile files("lib/hamcrest-core-1.3.jar")
compile files("lib/hive-common-2.1.0.2.5.0.2-3.jar")
compile files("lib/hive-exec-2.1.0.2.5.0.2-3.jar")
// compile files("lib/hive-jdbc-1.2.1000.2.5.0.2-3-standalone.jar")
compile files("lib/hive-jdbc-2.1.0.2.5.0.2-3.jar")
compile files("lib/hive-metastore-2.1.0.2.5.0.2-3.jar")
compile files("lib/hive-service-2.1.0.2.5.0.2-3.jar")
compile files("lib/httpclient-4.5.1.jar")
compile files("lib/httpcore-4.4.jar")
compile files("lib/junit-4.12.jar")
compile files("lib/log4j-1.2.17.jar")
compile files("lib/org-apache-commons-logging.jar")
compile files("lib/slf4j-api-1.7.10.jar")
compile files("lib/tdgssconfig.jar")
compile files("lib/terajdbc4.jar")
compile files("lib/xercesImpl-2.9.1.jar")

compile files("lib/BnsfFortifyRemediationAPI.jar")
compile files("lib/jericho-html-2.6.jar")
compile files("lib/javax.servlet-api-3.0.1.jar")
compile files("lib/commons-fileupload-1.3.jar")

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    // testCompile 'junit:junit:4.12'
    testCompile group: 'junit', name: 'junit', version: '4.12'

}

compileJava.dependsOn clean

jar {
  baseName = 'data-validation'
  manifest {
        attributes 'Main-Class': 'com.bnsf.ingestion.validation.ValidationBase'
  }
  
  zip64=true
  from {
    configurations.compile.collect {
      it.isDirectory() ? it : zipTree(it)
    }
    configurations.runtime.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
  exclude "META-INF/*.SF"
  exclude 'META-INF/*.DSA'
  exclude 'META-INF/*.RSA'
  exclude "LICENSE*"
}

task myzip(type: Zip) {	
    
    def p = File.createTempFile('temp', '.tmp')
    p.write "hd-data-validation Jenkins build: $vrsn"
    p.deleteOnExit()
   
    // Create a readme file that includes the jenkins build # 
    from(p) {
      rename {
         'release.txt'
      }
      into "data-validation"
    }
    
    from('./') {
            into "data-validation"
            include 'scripts/**/**' 
    }
    
    // name the jar w/o version number and put in the lib folder inside the zip    
    from (jar.outputs.files) {
        rename {
           'data-validation.jar'
        }
        into "data-validation/lib"
    }
    
    // name the jar w/o version number and put in the lib folder inside the zip
    from (configurations.compile.files) {
        into "data-validation/lib"
    }

}

myzip.setArchiveName('data-validation.zip')
 
artifacts {
	archives myzip
} 
