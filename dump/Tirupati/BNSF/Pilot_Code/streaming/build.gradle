/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'C839130' at '26/12/16 18:12' with Gradle 2.9
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java

apply plugin: 'java'
apply plugin: 'scala'

apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'

group = 'com.bnsf.hd'
version = "$vrsn"

description = "Pilot"
jar.baseName = 'data-streaming'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        maven { url "http://artifactory.bnsf.com:8081/artifactory/repo" }
        flatDir {
    		dirs 'lib'
    	}
    }

  dependencies {
    //classpath "org.scoverage:gradle-scoverage:2.0.1"  
    classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
  }
  
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    //mavenCentral()
    maven { url "http://artifactory.bnsf.com:8081/artifactory/repo" }
    flatDir {
    	dirs 'lib'
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
	
	// Spark jars
	// ~~~~~
    compile group: 'org.hortonworks', name: 'spark-assembly', version: '1.6.2.2.5.0.2-3-hadoop2.7.3.2.5.0.2-3'

    // The production code uses the SLF4J logging API at compile time
    // ~~~~~
    //compile 'org.slf4j:slf4j-api:1.7.13'

    // Scala libraries
    // ~~~~~
    compile group: 'org.scala-lang', name: 'scala-library', version: '2.10.4'
    compile group: 'org.scala-lang', name: 'scala-compiler', version: '2.10.4'
    compile group: 'org.scala-lang', name: 'scala-reflect', version: '2.10.4'
	
	 
	//Java JMX Jars
	// ~~~~~
	compile group: 'javax.jms', name: 'jms', version: '2.0'


	//Tibco Jars
	//compile name: 'tibjms'
	compile group: 'com.tibco', name: 'tibjms', version: '8.2.0'
	
	//HBase Jars
	// compile group: 'zhzhan', name: 'shc', version: '0.0.11-1.6.1-s_2.10'
	//com.hortonworks:shc:1.0.0-1.6-s_2.10
	// compile group: 'com.hortonworks', name: 'shc', version: '1.0.0-1.6-s_2.10'
	// shc-core-1.0.1-1.6-s_2.10.jar
	compile 'com.hortonworks:shc-core:1.0.1-1.6-s_2.10'
	
    // HBase Jars
    // ~~~~~        
    compile group: 'org.hortonworks.hbase', name: 'hbase-common', version: '1.1.2.2.5.0.2-3', transitive: false
    compile group: 'org.hortonworks.hbase', name: 'hbase-client', version: '1.1.2.2.5.0.2-3', transitive: false
    compile group: 'org.hortonworks.hbase', name: 'hbase-server', version: '1.1.2.2.5.0.2-3', transitive: false
    compile group: 'org.hortonworks.hbase', name: 'hbase-protocol', version: '1.1.2.2.5.0.2-3', transitive: false

    // Google Guava
    // ~~~~~
    compile group: 'com.google.guava', name: 'guava', version: '12.0.1'



    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

jar {
  baseName = 'data-streaming'

  zip64=true
  from {
    configurations.compile.collect {
      it.isDirectory() ? it : zipTree(it)
    }
    configurations.runtime.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
//  manifest {
//        attributes 'Main-Class': 'com.bnsf.Report_HiWi_Detail'
//    }
  exclude "META-INF/*.SF"
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude "LICENSE*"
}

task myzip(type: Zip) {	
    
    def p = File.createTempFile('temp', '.tmp')
    p.write "hd-data-streaming Jenkins build: $vrsn\n"
    p.deleteOnExit()
   
    // Create a readme file that includes the jenkins build # 
    from(p) {
      rename {
         'release.txt'
      }
      into "data-streaming"
    }
    
    from('./') {
            into "data-streaming"
            include '*.sh'
            include 'scripts/**/**'
            include 'config/**/log4j*'
    }
    
    // name the jar w/o version number and put in the lib folder inside the zip    
    from (jar.outputs.files) {
        rename {
           'data-streaming.jar'
        }
        into "data-streaming/lib"
    }
    
    // add other jars to lib folder
    from (configurations.compile.files) {
        into "data-streaming/lib"
    }

}

myzip.setArchiveName('data-streaming.zip')
 
artifacts {
	archives myzip
} 
